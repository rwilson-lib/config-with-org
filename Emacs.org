# -*- org-confirm-babel-evaluate: nil; eval: (add-hook 'after-save-hook #'org-babel-tangle);-*-
#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el
* Benchmark
#+begin_src emacs-lisp 
  (use-package benchmark-init
    :ensure t
    ;; remove this line when you want to take benchmark at init 
    ;; :commands (benchmark-init/activate benchmark-init/install)
    :config
    ;; To disable collection of benchmark data after init is done.
    (add-hook 'after-init-hook 'benchmark-init/deactivate)
    (message "benchmark-init loaded ✔"))
#+end_src
* Environment
** Custom File
#+begin_src emacs-lisp
  ;; (setq custom-file (locate-user-emacs-file "custom.el"))
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src
** Package Install
#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))


  (if (version< emacs-version "29.0")
  (unless (package-installed-p 'use-package)
    (package-install 'use-package)))

  (require 'use-package)

  (setq use-package-always-ensure t)
#+end_src
** Emacs
#+begin_src emacs-lisp
      ;; A few more useful configurations...
      (use-package emacs
	:bind (("C-S-u" . universal-argument)
	       ("C-r" . recursive-edit)
	       ("<f12>" . tmm-menubar)
	       ("s-<up>" . scroll-other-window)
	       ("s-<down>" . scroll-other-window-down))

	:hook (xwidget-webkit-mode . (lambda ()
				       (goto-address-mode 0 )))

	;; start emacs-server if not running
	:hook (after-init . (lambda ()
			      (pixel-scroll-precision-mode)
			      (require 'server)
			      (unless (server-running-p)
				(server-start))))
	:init
	(setq inhibit-startup-message t
	      show-paren-context-when-offscreen 'overlay)

	;; (menu-bar-mode 1)
	(scroll-bar-mode -1)
	(tool-bar-mode -1)
	(tooltip-mode -1)
	(set-fringe-mode 10)
	(display-battery-mode 1)
	(column-number-mode)
	;; enabled scroll left with C-x 
	(put 'scroll-left 'disabled nil)

	;; Add prompt indicator to `completing-read-multiple'.
	;; Alternatively try `consult-completing-read-multiple'.
	(defun crm-indicator (args)
	  (cons (concat "[CRM] " (car args)) (cdr args)))
	(advice-add #'completing-read-multiple :filter-args #'crm-indicator)

	(setq goto-address-url-face 'link
	      goto-address-url-mouse-face 'highlight
	      goto-address-mail-face 'link
	      goto-address-mail-mouse-face 'highlight)

	(global-goto-address-mode)

	;; (set-frame-parameter nil 'fullscreen 'fullboth)
	(setq visible-bell t)

	;; Tab Bar
	(setq tab-bar-tab-hints t
	      tab-bar-new-button-show nil
	      tab-bar-close-button-show nil)

	;; Do not allow the cursor in the minibuffer prompt
	(setq minibuffer-prompt-properties
	      '(read-only t cursor-intangible t face minibuffer-prompt))
	(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)



	;; Emacs 28: Hide commands in M-x which do not work in the current mode.
	;; Vertico commands are hidden in normal buffers.
	(setq read-extended-command-predicate
	      #'command-completion-default-include-p)

	;; Case in-sensitivie-search
	(setq read-file-name-completion-ignore-case t
	      read-buffer-completion-ignore-case t
	      completion-ignore-case t)

	;; Do not use system clip board
	;; (setq x-select-enable-clipboard nil)
	;; Treat clipboard input as UTF-8 string first; compound text next, etc.
      (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

	;; Backups
	(setq backup-directory-alist '(("." . "~/.emacs.d/backup-dir")))
	(setq delete-old-versions t
	      kept-new-versions 6
	      kept-old-versions 2
	      version-control t)

	(setq backup-enable-predicate
	      (lambda (name)
		(and (normal-backup-enable-predicate name)
		     (not
		      (let ((method (file-remote-p name 'method)))
			(when (stringp method)
			  (member method '("su" "sudo" "doas"))))))))

	;; Enable recursive minibuffers
	(setq enable-recursive-minibuffers t)
      :if (treesit-available-p) 		; check if Emacs is built with tree-sitter library
      :config
      (setq treesit-extra-load-path '("~/.lib/tree-sitter-langs/")))

#+end_src

** Dried
#+begin_src emacs-lisp
  ;;;###autoload
  (defun ora-dired-rsync (dest)
    (interactive
     (list
      (expand-file-name
       (read-file-name
        "Rsync to:"
        (dired-dwim-target-directory)))))
    ;; store all selected files into "files" list
    (let ((files (dired-get-marked-files
                  nil current-prefix-arg))
          ;; the rsync command
          (tmtxt/rsync-command
           "rsync -arvz --progress "))
      ;; add all selected file names as arguments
      ;; to the rsync command
      (dolist (file files)
        (setq tmtxt/rsync-command
              (concat tmtxt/rsync-command
                      (shell-quote-argument file)
                      " ")))
      ;; append the destination
      (setq tmtxt/rsync-command
            (concat tmtxt/rsync-command
                    (shell-quote-argument dest)))
      ;; run the async shell command
      (async-shell-command tmtxt/rsync-command "*rsync*")
      ;; finally, switch to that window
      (other-window 1)))

  (use-package dired
    :ensure nil
    :hook (dired-mode . (lambda ()
                             ;; Set dired-x buffer-local variables here.  For example:
                             ;; (dired-omit-mode 1)
                             (setq-local truncate-lines t)
                             (define-key dired-mode-map (kbd "C-c C-x c")
                               (lambda ()
                                 (interactive)
                                 (let ((org-attach-method 'cp))
                                   (call-interactively #'org-attach-dired-to-subtree))))))

    :bind ((:map dired-mode-map
                 ("Y" . ora-dired-rsync)))
    :config
    (setq dired-dwim-target t
          dired-listing-switches "-alh"))
#+end_src
** Font and Windows
#+begin_src emacs-lisp
    (defun delete-other-windows-advice (function &rest args)
      (if current-prefix-arg
          (if (winum-get-window-by-number current-prefix-arg)
              (switch-to-buffer (window-buffer
                                 (winum-get-window-by-number current-prefix-arg)))))
      (apply function args))

    (advice-add 'delete-other-windows :around #'delete-other-windows-advice)

    (defun custom/display-buffer-at-bottom ()
      (interactive)
      (let ((buffer (current-buffer)))
        (with-current-buffer buffer
          (delete-window)
          (display-buffer-at-bottom
           buffer '(
                    ;; (window-parameters . ((mode-line-format . (" " "%b"))))
                    ;; (window-height . 0.25)
                    )))))

    (use-package window
      :ensure nil
      :bind (("<f8>" . window-toggle-side-windows))
      :config
      (custom-set-variables
       '(display-buffer-base-action
         '((display-buffer--maybe-same-window
            display-buffer-reuse-window
            display-buffer--maybe-pop-up-frame-or-window
            display-buffer-in-previous-window
            display-buffer-below-selected
            display-buffer-at-bottom
            display-buffer-pop-up-frame))))
      ;; '(window-min-height 18)
      ;; '(window-min-width 40))

      (setq
       split-width-threshold 0
       split-height-threshold nil)
      :custom
      (display-buffer-alist '(("\\*\\(e?shell\\|vterm\\|Python\\)\\*"
                               (display-buffer-in-side-window)
                               (window-height . 0.25)
                               (side . bottom)
                               ;; (window-parameters . ((mode-line-format . ("" "%b"))))
                               (slot . -1))

                              ;; ;;[Hh]elp
                              ;; ("\\*help" 
                              ;;  (display-buffer-reuse-window display-buffer-in-side-window)
                              ;;  (window-width . 75))

                              ("\\*\\(Backtrace\\|Warnings\\|Compile-log\\|Messages\\)\\*"
                               (display-buffer-in-side-window)
                               (window-height . 0.25)
                               (side . bottom)
                               (slot . 0)))))
    (defun efs/set-font-faces ()
      (message "Setting faces!")
      (set-face-attribute 'default nil :font "FiraCode Nerd Font" :height 168)

      ;; Set the fixed pitch face
      (set-face-attribute 'fixed-pitch nil :font "FiraCode Nerd Font" :height 168)

      ;; Set the variable pitch face
      (set-face-attribute 'variable-pitch nil :font "FiraCode Nerd Font" :height 168 :weight 'regular))

    (if (daemonp)
        (add-hook 'after-make-frame-functions
                  (lambda (frame)
                    (with-selected-frame frame
                      (efs/set-font-faces))))
      (efs/set-font-faces))
#+end_src

** Shell
#+begin_src emacs-lisp
  (setenv "PATH" (concat (getenv "PATH") "/Users/rwilson/anaconda3/condabin:/Users/rwilson/bin:/usr/local/bin:/Users/rwilson/Library/Python/3.8/bin:/Users/rwilson/Library/Python/3.9/bin:/Library/PostgreSQL/13/bin:/usr/local/opt/mysql-client/bin:/Users/rwilson/go/bin:./node_modules/.bin:/Applications/Emacs.app/Contents/MacOS/bin:/opt/local/bin:/opt/local/sbin:/Library/Frameworks/Python.framework/Versions/3.9/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/TeX/texbin:/usr/local/go/bin:/usr/local/MacGPG2/bin:/opt/X11/bin:/Library/Apple/usr/bin:/Users/rwilson/.cargo/bin"))

  (setq exec-path (append exec-path '("/Users/rwilson/anaconda3/condabin/" "/Users/rwilson/bin/" "/usr/local/bin/" "/Users/rwilson/Library/Python/3.8/bin/" "/Users/rwilson/Library/Python/3.9/bin/" "/Library/PostgreSQL/13/bin/" "/usr/local/opt/mysql-client/bin/" "/Users/rwilson/go/bin/" "./node_modules/.bin/" "/Applications/Emacs.app/Contents/MacOS/bin/" "/opt/local/bin/" "/opt/local/sbin/" "/Library/Frameworks/Python.framework/Versions/3.9/bin/" "/usr/local/bin/" "/usr/bin/" "/bin/" "/usr/sbin/" "/sbin/" "/Library/TeX/texbin/" "/usr/local/go/bin/" "/usr/local/MacGPG2/bin/" "/opt/X11/bin/" "/Library/Apple/usr/bin/" "/Users/rwilson/.cargo/bin/" "/Applications/Emacs.app/Contents/MacOS/libexec/")))

  (setq comint-terminfo-terminal "eterm-256color")

  (setenv "GIT_EDITOR" "emacs")

  ;; (use-package exec-path-from-shell
  ;;   :config (exec-path-from-shell-initialize))

#+end_src
  
** Undo Fu
#+begin_src emacs-lisp 
  (use-package undo-fu
    :config
    (use-package undo-fu-session
    :config
    (setq undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))))
#+end_src
  
** Global Settings
#+begin_src emacs-lisp
  ;; change all prompts to y or n
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq delete-by-moving-to-trash t
        trash-directory "~/.trash"
        confirm-kill-emacs 'y-or-n-p)

  ;; Emacs watch file on disk for changes
  (global-auto-revert-mode 1)
  (setq auto-revert-verbose nil)


  ;; turn on cursor line mode
  ;; (global-hl-line-mode 1)
  ;; Emacs auto refresh dired buffers
  (setq global-auto-revert-non-file-buffers t)
  (setq tab-width 4)

  ;; (setq browse-url-browser-function 'browse-url-firefox
  ;; browse-url-firefox-program "firefox")
#+end_src
** Try
#+begin_src emacs-lisp
    (use-package try
      :disabled
      ;; :defer 5
      :config
      (message "try ready ✔"))
#+end_src
* Key Binding
** Evil
#+begin_src emacs-lisp
  (defun custom/force-normal-state-or-exit ()
    (interactive)
    (cond
     ((eq evil-state 'normal) (keyboard-quit))
     (t (evil-force-normal-state))))

  (defun tab-bar-switch-to-next-tab-m()
    (interactive)
    (if (equal current-prefix-arg nil) ; no C-u
        (tab-bar-switch-to-next-tab)
      (tab-bar-select-tab current-prefix-arg)))

  (defun tab-bar-switch-to-prev-tab-m()
    (interactive)
    (if (equal current-prefix-arg nil) ; no C-u
        (tab-bar-switch-to-prev-tab)
      (tab-bar-select-tab current-prefix-arg)))

  (use-package evil
    :demand t 

    :bind ((:map evil-normal-state-map
                 ("<escape>" . custom/force-normal-state-or-exit)))

    :init
    (setq evil-want-C-i-jump nil
          evil-want-C-u-delete t
          evil-want-C-u-scroll t
          evil-want-C-w-in-emacs-state t
          evil-want-integration t
          evil-want-keybinding nil)

    ;; (setq evil-disable-insert-state-bindings t)

    (setq evil-undo-system 'undo-fu)
    (setq evil-want-fine-undo t) 

    :config
    (setq evil-ex-search-case "insensitive"
          evil-auto-balance-w nil)

    (evil-define-command evil-delete-buffer-m (count)
      "Deletes the current window.
             If `evil-auto-balance-windows' is non-nil then all children of
             the deleted window's parent window are rebalanced."
      :repeat nil
      (interactive "<c>")
      (let ((p (window-parent)))
        (if (not count)
            (evil-delete-buffer (current-buffer))
          (if (winum-get-window-by-number count)
              (evil-delete-buffer (window-buffer (winum-get-window-by-number count)))
            (message "window does not exist")))
        (when evil-auto-balance-windows
          ;; balance-windows raises an error if the parent does not have
          ;; any further children (then rebalancing is not necessary anyway)
          (condition-case nil
              (balance-windows p)
            (error)))))

    (evil-define-command evil-window-exchange-m (count)
      "Without COUNT: exchange current window with next one.
      With COUNT: Exchange current window with COUNTth window."
      :repeat nil
      (interactive "<c>")
      (let ((this-buffer (window-buffer))
            (this-window (selected-window))
            other-buffer other-window)
        (if (not count)
            (setq other-buffer (window-buffer (next-window))
                  other-window (next-window))
          (save-window-excursion
            (evil-window-next count)
            (setq other-buffer (window-buffer)
                  other-window (selected-window))))
        (switch-to-buffer other-buffer nil t)
        (select-window other-window)
        (switch-to-buffer this-buffer nil t)
        (select-window this-window)))

    (evil-define-command evil-window-delete-m (&optional count)
      "Deletes the current window.
             If `evil-auto-balance-windows' is non-nil then all children of
             the deleted window's parent window are rebalanced."
      :repeat nil
      (interactive "<c>")
      (let ((p (window-parent)))
        (if (not count)
            (delete-window)
          (if (winum-get-window-by-number count)
              (delete-window(winum-get-window-by-number count))
            (message "cant delete window")))
        (when evil-auto-balance-windows
          ;; balance-windows raises an error if the parent does not have
          ;; any further children (then rebalancing is not necessary anyway)
          (condition-case nil
              (balance-windows p)
            (error)))))

    (evil-define-command evil-sfind (file)
      "Open FILE in a split"
      (interactive "<f>")
      (find-file-other-window file))

    (evil-define-command evil-tabedit (file)
      "Open FILE in a new tab"
      (interactive "<f>")
      (find-file-other-tab file))

    (evil-define-operator evil-write-delete-buffer (beg end type file-or-append &optional bang)
      "Save the current buffer, from BEG to END, to FILE-OR-APPEND.
            If FILE-OR-APPEND is of the form \" FILE\", append to FILE
            instead of overwriting.  The current buffer's filename is not
            changed unless it has no associated file and no region is
            specified.  If the file already exists and the BANG argument is
            non-nil, it is overwritten without confirmation."
      :motion nil
      :move-point nil
      :type line
      :repeat nil
      (interactive "<R><fsh><!>")
      (let* ((append-and-filename (evil-extract-append file-or-append))
             (append (car append-and-filename))
             (filename (cdr append-and-filename))
             (bufname (buffer-file-name (buffer-base-buffer))))
        (when (zerop (length filename))
          (setq filename bufname))
        (cond
         ((zerop (length filename))
          (user-error "Please specify a file name for the buffer"))
         ;; execute command on region
         ((eq (aref filename 0) ?!)
          (shell-command-on-region beg end (substring filename 1)))
         ;; with region or append, always save to file without resetting
         ;; modified flag
         ((or append (and beg end))
          (write-region beg end filename append nil nil (not (or append bang))))
         ;; no current file
         ((null bufname)
          (write-file filename (not bang)))
         ;; save current buffer to its file
         ((string= filename bufname)
          (if (not bang) (save-buffer) (write-file filename)))
         ;; save to another file
         (t
          (write-region nil nil filename
                        nil (not bufname) nil
                        (not bang))))))

    (evil-ex-define-cmd "wd[elete]" 'evil-write-delete-buffer)
    (evil-ex-define-cmd "sf[ind]" 'evil-sfind)
    (evil-ex-define-cmd "tabedit" 'evil-tabedit)

    ;; example how to map a command in normal mode (called 'normal state' in evil)
    (define-key evil-normal-state-map (kbd "z <return>") 'enlarge-window)
    (define-key evil-normal-state-map (kbd "g t") 'tab-bar-switch-to-next-tab-m)
    (define-key evil-normal-state-map (kbd "g T") 'tab-bar-switch-to-prev-tab-m)
    (evil-mode 1)
    (message "Done Loading Evil"))

  (defun moon-override-yank-pop (&optional arg)
    "Delete the region before inserting poped string."
    (when (and evil-mode (eq 'visual evil-state))
      (kill-region (region-beginning) (region-end))))

  (advice-add 'consult-yank-pop :before #'moon-override-yank-pop)

  ;; (use-package goto-last-change)
#+end_src
** Evil Collection
#+begin_src emacs-lisp
    (use-package evil-collection
      :after evil
      ;; (evil-set-initial-state 'calc-mode 'emacs)

      :config
      (condition-case err
	  (evil-collection-init)
	(error (message "Error initializing evil-collection-init: %S" err))))

    (use-package evil-matchit
      :requires evil)

    (use-package evil-surround
      :requires evil)

    (add-hook 'text-mode-hook
	      (lambda () (evil-surround-mode)
		(evil-matchit-mode)))

#+end_src
** Hydra
#+begin_src emacs-lisp
  (use-package hydra
    :config
    (defhydra hydra-vuiet (:timeout 4)
      "vuiet music"
      ("l" vuiet-love-track "like")
      ("u" vuiet-unlove-track "dislike")
      ("s" vuiet-stop "stop")
      (">" vuiet-next "next")
      ("<" vuiet-previous "previous")
      ("<escape>" nil "finish"))

    (defhydra hydra-mpc (:timeout 4)
      "mpc music"
      ("s" mpc-stop "stop")
      (">" mpc-next "next")
      ("<" mpc-prev "previous")
      ("<escape>" nil "finish"))

    (defhydra hydra-aya (:timeout 4)
      "aya"
      ("c" aya-create "aya create")
      ("e" aya-expand "aya expand")
      ("<escape>" nil "finish")))
#+end_src
** General
#+begin_src emacs-lisp
  (defun my/move-to-middle ()
    (interactive)
    (let* ((begin (line-beginning-position))
           (end (line-end-position))
           (middle (/ (+ end begin) 2)))
      (goto-char middle)))

  (use-package general
    :after evil
    :config
    (general-evil-setup t)

    (general-nvmap
      "g \\" 'toggle-line-number
      "g m" 'my/move-to-middle
      "; ;" 'evil-buffer
      "SPC f" 'find-file
      "SPC F" 'find-file-other-window
      "SPC b" 'consult-buffer
      "SPC B" 'consult-buffer-other-window
      "SPC SPC" 'execute-extended-command
      "SPC w" (general-simulate-key "C-w")
      "SPC x" (general-simulate-key "C-x")
      "SPC c" (general-simulate-key "C-c")
      "SPC g" (general-simulate-key "M-g")
      "SPC s" (general-simulate-key "M-s"))
    
    (general-define-key
     :keymaps '(normal visual)
     :prefix "g SPC"
     "x" (general-simulate-key "C-c C-c"))

    (general-define-key
     :keymaps '(normal insert visual emacs)
     :prefix "C-x"
     "mc" 'compose-mail
     "4mc" 'compose-mail-other-window
     "5mc" 'compose-mail-other-frame
     "mm" 'mu4e)

    (nvmap :prefix "SPC"
      "m" '(:ignore t :which-key "music")
      "mc" '(hydra-mpc/body :which-key "mpc-music")
      "mv" '(hydra-vuiet/body :which-key "vuiet-music"))
    (message "general ready ✔"))
#+end_src

** Which-Key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config (setq which-key-idle-delay 0.3))
#+end_src
** Evil-Text Object
#+begin_src emacs-lisp
  ;; (use-package evil-textobj-tree-sitter
  ;;   :config
  ;;   (general-define-key
  ;;    :keymaps '(evil-outer-text-objects-map)
  ;;    "/" (evil-textobj-tree-sitter-get-textobj "comment.outer")
  ;;    "=" (evil-textobj-tree-sitter-get-textobj "statement.outer")
  ;;    "." (evil-textobj-tree-sitter-get-textobj "block.outer")
  ;;    "&" (evil-textobj-tree-sitter-get-textobj "parameter.outer")
  ;;    "l" (evil-textobj-tree-sitter-get-textobj "loop.outer")
  ;;    "d" (evil-textobj-tree-sitter-get-textobj "conditional.outer")
  ;;    "c" (evil-textobj-tree-sitter-get-textobj "class.outer")
  ;;    "f" (evil-textobj-tree-sitter-get-textobj "function.outer"))

  ;;   (general-define-key
  ;;    :keymaps '(evil-inner-text-objects-map)
  ;;    "." (evil-textobj-tree-sitter-get-textobj "block.inner")
  ;;    "&" (evil-textobj-tree-sitter-get-textobj "parameter.inner")
  ;;    "l" (evil-textobj-tree-sitter-get-textobj "loop.inner")
  ;;    "d" (evil-textobj-tree-sitter-get-textobj "conditional.inner")
  ;;    "c" (evil-textobj-tree-sitter-get-textobj "class.inner")
  ;;    "f" (evil-textobj-tree-sitter-get-textobj "function.inner")))
#+end_src
* User Interface Improvements
#+begin_src emacs-lisp
  (use-package visual-regexp
    :commands (vr/mc-mark vr/replace vr/query-replace))
#+end_srC
** Toggle Line Number
#+begin_src emacs-lisp
  (defun toggle-line-number()
    (interactive)
    (if (equal current-prefix-arg nil) ; no C-u
        (acase display-line-numbers-type
          ('t (menu-bar--display-line-numbers-mode-relative))
          ('nil (menu-bar--display-line-numbers-mode-relative))
          ('visual (menu-bar--display-line-numbers-mode-relative))
          ('relative (menu-bar--display-line-numbers-mode-absolute)))
      (menu-bar--display-line-numbers-mode-none)))
#+end_src
** All Icons
#+begin_src emacs-lisp
  (use-package all-the-icons

    :hook (after-init . all-the-icons-completion-mode)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)

    :config
    (use-package all-the-icons-completion :after all-the-icons))
#+end_src

** Themes and Mode-line
#+begin_src emacs-lisp
  (setq display-time-day-and-date t
        display-time-24hr-format t)

  (display-time)

  (use-package modus-themes
    :ensure nil
    :init
    ;; Add all your customizations prior to loading the themes
    ;; Configure the Modus Themes' appearance
    (setq 
          modus-themes-mode-line '(accented borderless)
          modus-themes-fringes 'subtle
          modus-themes-tabs-accented t
          modus-themes-paren-match '(bold intense)
          modus-themes-prompts '(bold intense)
          modus-themes-completions 'opinionated
          modus-themes-region '(bg-only))

    (setq modus-themes-bold-constructs t
          modus-themes-syntax '(green-strings yellow-comments)
          modus-themes-italic-constructs t)

    (setq modus-themes-scale-headings t
          modus-themes-org-blocks 'tinted-background
          modus-themes-headings
          '((1 . (rainbow overline background 1.4))
            (2 . (rainbow background 1.3))
            (3 . (rainbow bold 1.2))
            (t . (semilight 1.1))))
    :bind ("<f5>" . modus-themes-toggle))

  (load-theme 'modus-vivendi t)
#+End_src
*** Doom Modeline
#+begin_src emacs-lisp
    (use-package doom-modeline
      :hook (after-init . doom-modeline-mode)

      :custom    
      (doom-modeline-height 25)
      (doom-modeline-bar-width 1)
      (doom-modeline-icon t)
      (doom-modeline-major-mode-icon t)
      (doom-modeline-major-mode-color-icon t)
      (doom-modeline-buffer-file-name-style 'truncate-upto-project)
      (doom-modeline-buffer-state-icon t)
      (doom-modeline-buffer-modification-icon t)
      (doom-modeline-minor-modes nil)
      (doom-modeline-enable-word-count nil)
      (doom-modeline-buffer-encoding t)
      (doom-modeline-indent-info nil)
      (doom-modeline-checker-simple-format t)
      (doom-modeline-vcs-max-length 12)
      (doom-modeline-env-version t)
      (doom-modeline-irc-stylize 'identity)
      (doom-modeline-github-timer nil)
      (doom-modeline-gnus-timer nil))

    (defun my-doom-modeline--font-height ()
    "Calculate the actual char height of the mode-line."
    (+ (frame-char-height) 0))

  (advice-add #'doom-modeline--font-height :override #'my-doom-modeline--font-height)
  
#+end_src
* Avy
#+begin_src emacs-lisp
  (use-package avy
    :bind ((:map evil-normal-state-map
		 ("s" . evil-avy-goto-char-2)
		 ("gsac" . avy-goto-char)
		 ("gsal" . avy-goto-line)))
    :config
    (message "avy loaded! ✔"))

  (use-package ace-link
    :commands (ace-link)
    :config
    (message "ace-link loaded! ✔"))

  (use-package link-hint
    :commands (link-hint-open-link link-hint-copy-link)
    :config
    (general-define-key
     :prefix "C-x / l"
     ;; application spefic binding 
     "o" 'link-hint-open-link
     "c" 'link-hint-copy-link
    (message "link-hint ready ✔")))
#+end_src

** Order-less
#+begin_src emacs-lisp
  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-default nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src
** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :demand t 

    :general
    (:keymaps 'vertico-map
              "<tab>" #'vertico-insert        ; Insert selected candidate into text area
              "<S-tab>" #'vertico-previous  ; Insert selected candidate into text area
              "C-j" #'vertico-next
              "C-k" #'vertico-previous
              "C-f" 'vertico-exit
              "<escape>" #'abort-minibuffers ; Close minibuffer
              "C-SPC" #'vertico-quick-exit
              "C-S-SPC" #'vertico-quick-insert
              "M-o" #'embark-act
              "C-M-o" #'kb/vertico-quick-embark

              ;; NOTE 2022-02-05: Cycle through candidate groups
              "C-M-j" #'vertico-next-group
              "C-M-k" #'vertico-previous-group

              ;; Toggle Vertico multiforms in active minibuffer
              "C-l" #'vertico-multiform-grid
              "M-F" #'vertico-multiform-flat
              "C-;" #'vertico-multiform-vertical
              "M-U" #'vertico-multiform-unobtrusive)

    (:keymaps 'minibuffer-local-map
              "<tab>" #'completion-at-point        ; Insert selected candidate into text area
              "<escape>" #'abort-minibuffers ; Close minibuffer
              "C-u"  #'delete-minibuffer-contents
              "C-w"  #'backward-kill-word)

    :config
    ;; Use 'consult-completion-in-region' if Vertico is enabled.
    ;; Otherwise use the default 'completion--in-region' function.
    (setq completion-in-region-function
          (lambda (&rest args)
            (apply (if vertico-mode
                       #'consult-completion-in-region
                     #'completion--in-region)
                   args)))

    (defun kb/vertico-quick-embark (&optional arg)
      "Embark on candidate using quick keys."
      (interactive)
      (when (vertico-quick-jump)
        (embark-act arg)))

    ;;(advice-add #'completing-read-multiple
    ;;            :override #'consult-completing-read-multiple)


    ;; Configure the display per command.
    ;; Use a buffer with indices for imenu
    ;; and a flat (Ido-like) menu for M-x.
    (setq vertico-multiform-commands
          '((consult-imenu buffer indexed)
            (consult-grep buffer)
            (consult-buffer flat indexed)
            (execute-extended-command flat indexed)))

    ;; Configure the display per completion category.
    ;; Use the grid display for files and a buffer
    ;; for the consult-grep commands.
    (setq vertico-multiform-categories
          '((file grid indexed)
            ;;(t reverse)
            ))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode 1)
    ;; Enable vertico-multiform
    (vertico-multiform-mode))
#+end_src

** History 
#+begin_src emacs-lisp
  ;; Emacs remeber recently open files
  (recentf-mode 1)

  ;; Remeber window layout
  (winner-mode)

  ;; Emacs remeber cursor last position
  (save-place-mode 1)

  ;; Emacs remeber input history
  (use-package savehist
    :init
    (savehist-mode)
    :config
    (setq history-length 150))

#+end_src
** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia 
    :after vertico
    :init
    (marginalia-mode))
#+end_src
** IEdit
#+begin_src emacs-lisp
  (global-set-key (kbd "C-*") 'iedit-mode)
  (global-set-key (kbd "M-*") 'iedit-mode-toggle-on-function)
  (use-package iedit
    :bind ((:map iedit-occurrence-keymap-default
                 ("M-u" . iedit-downcase-occurrences)
                 ("M-U" . iedit-upcase-occurrences)
                 ("<tab>" . iedit-next-occurrence)
                 ("<S-tab>" . iedit-prev-occurrence)
                 ("<escape>" . iedit--quit))))
  ;; iedit-goto-last-occurrences
  ;; iedit-goto-first-occurrences
#+end_src
** Embark
#+begin_src emacs-lisp
  (use-package embark
    :bind
    (("M-o" . embark-act)         ;; pick some comfortable binding
     ("M-O" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings) ;; alternative for `describe-bindings'

     :map minibuffer-local-map
     ("C-b" . embark-become)) 

    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))
  ;; use C-u to perform multiple action

  (use-package avy-embark-collect
    :after embark)

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
** Tree-Macs
#+begin_src emacs-lisp
  (use-package treemacs
    :commands (treemacs)
    :config
    (use-package treemacs-all-the-icons
      :config
      (treemacs-load-theme "all-the-icons"))
    (message "treemacs loaded"))

  (use-package treemacs-icons-dired
    :after (treemacs dired)
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :config
    (message "treemacs-projectile ready"))

  ;;(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  ;;  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  ;;  :ensure t
  ;;  :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :config
    (message "treemacs-projectile ready"))

  (use-package treemacs-magit
    :after (treemacs magit)
    :config
    (message "treemacs-magit ready"))

  (use-package treemacs-evil
    :after (treemacs evil)
    :config
    (message "treemacs-evil ready"))
#+end_src
** Key-cast
#+begin_src emacs-lisp
  (use-package keycast
    :commands (keycast-mode keycast-tab-bar keycast-mode-line)
    :config
    (define-minor-mode keycast-mode
      "Show current command and its key binding in the mode line (fix for use with doom-mode-line)."
      :global t
      (if keycast-mode
	  (add-hook 'pre-command-hook 'keycast--update t)
	(remove-hook 'pre-command-hook 'keycast--update)))
    (add-to-list 'global-mode-string '("" mode-line-keycast))
    (message "keycast loaded ✔"))
#+end_src
** Company
#+begin_src emacs-lisp 
  (use-package company
    ;; (define-key company-active-map [return] nil)
    ;; (define-key company-active-map [tab] 'company-complete-common)
    ;; (define-key company-active-map (kbd "TAB") 'company-complete-common)
    ;; (define-key company-active-map (kbd "M-TAB") 'company-complete-selection)
    :bind (:map company-active-map
                ("<escape>" . company-abort)
                ("<tab>" . company-complete-selection))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    :config
    (setq company-selection-wrap-around t
          company-tooltip-align-annotations t
          company-idle-delay 0
          company-minimum-prefix-length 2
          company-tooltip-limit 10))

  (use-package company-box
    :after company
    :hook (company-mode . company-box-mode))
#+end_src
** Company Back-ends
#+begin_src emacs-lisp 
  (use-package company-web
    :after (company web-mode)
    :config
    (add-to-list 'company-backends 'company-web-html)
    (add-to-list 'company-backends 'company-web-jade)
    (add-to-list 'company-backends 'company-web-slim))

  (use-package company-restclient
    :after ( company restclient )
    :config 
    (add-to-list 'company-backends 'company-restclient))

  ;; (use-package company-tabnine
  ;;   :config
  ;;   (add-to-list 'company-backends #'company-tabnine)
  ;;   (setq company-idle-delay 0))
#+end_src
** Cape
#+begin_src emacs-lisp
  (use-package cape
    :config
    ;; Bind dedicated completion commands
    (general-define-key
     :states '(insert)
     :prefix "S-SPC"			  ; vim i_Ctrx-x
     "l"  'cape-line
     "n"  'completion-at-point            ; capf
     "k"  'cape-dict
     "t"  'powerthesaurus-lookup-synonyms-dwim
     "T"  'powerthesaurus-lookup-dwim
     "]"  'complete-tag                   ; etags
     "i"  'cape-dabbrev                   ; or dabbrev-completion
     "f"  'cape-file
     "w"  'cape-keyword
     "o"  'cape-symbol			  ; vim omni completion
     "a"  'cape-abbrev
     "s"  'cape-ispell
     "\\" 'cape-tex
     "&" 'cape-sgml
     "r" 'cape-rfc1345)
    :init
    (setq cape-dict-file "/usr/share/dict/words")
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    ;;(add-to-list 'completion-at-point-functions #'cape-dabbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-tex)
    (add-to-list 'completion-at-point-functions #'cape-symbol)
    (add-to-list 'completion-at-point-functions #'cape-keyword))
#+end_src
** IBuffer
#+begin_src emacs-lisp
  (use-package ibuffer
    :commands (ibuffer)
    :bind ("C-x C-b" . ibuffer)
    :config
    (message "IBuffer loaded ✔"))
#+end_src
* Window Management
** Winum Mode
#+begin_src emacs-lisp
  (use-package winum
    :config 
    (winum-mode)
    (message "winum ready ✔"))
#+end_src
** Ace Windows
#+begin_src emacs-lisp
  (use-package ace-window
    :after evil
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inhert ace-jump-face-background :height 1.5))))))
    :config
    (setq aw-dispatch-always t
          aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))

    (general-define-key
     :states '(normal insert)
     "C-6" 'evil-switch-to-windows-last-buffer)

    (general-define-key
     :keymaps '(evil-window-map)
     "f"  'make-frame
     "N"  'evil-buffer-new
     "m"  'evil-window-exchange
     "x"  'evil-window-exchange-m
     "d"  'evil-delete-buffer-m
     "c"  'evil-window-delete-m
     "t"  'tab-bar-move-window-to-tab
     "C"  'tab-close
     "SPC" 'custom/display-buffer-at-bottom
     "RET" 'evil-window-next
     "a" 'ace-window)
    (message "ace window ready ✔"))

#+end_src
* Terminal
** Eshell
#+begin_src emacs-lisp
  (use-package eshell
    :defer 3
    :commands (eshell)
    :config
    (message "eshell loaded ✔"))
#+end_src
** Term
#+begin_src emacs-lisp
  (defun my-term-handle-exit (&optional process-name msg)
    (message "%s | %s" process-name msg)
    (kill-buffer (current-buffer)))

  (advice-add 'term-handle-exit :after 'my-term-handle-exit)

  (use-package term
    :commands (term)
    :config
    (setq explicit-shell-file-name "zsh")
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
    (setq mode-line-format nil))

  (use-package eterm-256color
    :after term
    :hook (term-mode . eterm-256color-mode))
#+end_src
** Vterm
#+begin_src emacs-lisp
  (use-package vterm
    :commands (vterm)
    :hook
    (vterm-mode . (lambda () 
                    (setq-local mode-line-format nil)))
    :config
    (setq vterm-shell "/usr/local/bin/tmux")
    (setq vterm-max-scrollback 1000))
#+end_src
* Searches
** Consult
#+begin_src emacs-lisp
  (use-package consult
    :after vertico 
    :bind (;; C-c bindings (mode-specific-map)
	   ("C-c h" . consult-history)
	   ("C-c m" . consult-mode-command)
	   ("C-c b" . consult-bookmark)
	   ("C-c k" . consult-kmacro)

	   ;; C-x bindings (ctl-x-map)
	   ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
	   ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
	   ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	   ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame

	   ;; Custom M-# bindings for fast register access
	   ("M-#" . consult-register-load)
	   ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
	   ("C-M-#" . consult-register)

	   ;; Other custom bindings
	   ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	   ;; ("<help> a" . consult-apropos)            ;; orig. apropos-command

	   ;; M-g bindings (goto-map)
	   ("M-g e" . consult-compile-error)
	   ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
	   ("M-g g" . consult-goto-line)             ;; orig. goto-line
	   ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
	   ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
	   ("M-g m" . consult-mark)
	   ("M-g k" . consult-global-mark)
	   ("M-g i" . consult-imenu)
	   ("M-g I" . consult-imenu-multi)
	   ("M-g r" . consult-recent-file)

	   ;; M-s bindings (search-map)
	   ("M-s f" . consult-find)
	   ("M-s F" . consult-locate)
	   ("M-s g" . consult-grep)
	   ("M-s G" . consult-git-grep)
	   ("M-s r" . consult-ripgrep)
	   ("M-s l" . consult-line)
	   ("M-s L" . consult-line-multi)
	   ("M-s m" . consult-multi-occur)
	   ("M-s k" . consult-keep-lines)
	   ("M-s u" . consult-focus-lines)
	   ("M-s y" . consult-yasnippet)
	   ("M-s a" . ag)

	   ;; Isearch integration
	   ("M-s e" . consult-isearch-history))
    :config
    (message "consult ready ✔"))
  
  (use-package consult-yasnippet
    :after consult yasnippet)

  (use-package consult-company
    :after consult company)
#+End_src
** Isearch
#+begin_src emacs-lisp
  (use-package isearch
    :ensure nil
    :bind (:map isearch-mode-map
           ("<tab>" . isearch-complete)
           ("C-j" . avy-isearch)
           ("C-e" . iedit-mode-from-isearch)
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)))     ;; orig. isearch-edit-string
#+end_src

#+begin_src emacs-lisp
    (use-package fd-dired
      :commands (fd-dired))
#+end_src
** Web Search
#+begin_src emacs-lisp
  (use-package websearch
    :commands (websearch websearch-term websearch-point websearch-region)
    :config
    (general-define-key
     :prefix "C-c s"
     ;; application spefic binding 
     "t" 'websearch-term
     "r" 'websearch-region
     "." 'websearch-point)
    (message "websearch ready ✔"))
#+end_src
* Version Control
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :commands (magit magit-init magit-status)
    :defer 3
    :custom (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    :config

    (setq magit-section-initial-visibility-alist
	  '((untracked . hide)
	    (unstaged . hide)
	    (staged . hide)
	    (unpushed . hide)
	    (unpulled . hide)
	    (modified . hide)))
    (message "Magit ready ✔"))
#+end_src
** Diff-hl
#+begin_src emacs-lisp
  (use-package diff-hl
    :after magit
    :commands (diff-hl-mode global-diff-hl-mode)
    :config
    (setq
     diff-hl-side "left"
     diff-hl-show-staged-changes nil)
    (message "diff-hl ready ✔"))
#+end_src
** Forge  
#+begin_src emacs-lisp
  (use-package forge
    :requires ghub
    :after magit
    :init
    (setq ghub-use-workaround-for-emacs-bug nil)
    (setq forge-add-default-bindings nil)
    :config
    (general-define-key
     :keymaps '(forge-post-mode-map
		forge-topic-mode-map
		forge-post-section-map
		forge-issue-section-map
		forge-issues-section-map
		forge-pullreq-section-map
		forge-topic-list-mode-map
		forge-issue-list-mode-map
		forge-pullreqs-section-map
		forge-pullreq-list-mode-map
		forge-forge-repo-section-map
		forge-notifications-mode-map
		forge-topic-state-section-map
		forge-topic-marks-section-map
		forge-topic-title-section-map
		forge-repository-list-mode-map
		forge-topic-labels-section-map
		forge-topic-assignees-section-map
		forge-topic-review-requests-section-map)
     :states '(normal visual)
     "yb" 'forge-copy-url-at-point-as-kill)

    (general-define-key
     :keymaps '(forge-post-mode-map
		forge-topic-mode-map
		forge-post-section-map
		forge-issue-section-map
		forge-issues-section-map
		forge-pullreq-section-map
		forge-topic-list-mode-map
		forge-issue-list-mode-map
		forge-pullreqs-section-map
		forge-pullreq-list-mode-map
		forge-forge-repo-section-map
		forge-notifications-mode-map
		forge-topic-state-section-map
		forge-topic-marks-section-map
		forge-topic-title-section-map
		forge-repository-list-mode-map
		forge-topic-labels-section-map
		forge-topic-assignees-section-map
		forge-topic-review-requests-section-map)
     :states '(normal visual)
     ;; :prefix mpereira/leader
     "go" 'forge-browse-dwim)

    (general-define-key
     :keymaps '(forge-topic-mode-map
		forge-topic-list-mode-map
		forge-topic-state-section-map
		forge-topic-marks-section-map
		forge-topic-title-section-map)
     :states '(normal visual)
     ;; :prefix mpereira/leader
     "go" 'forge-browse-topic)

    (general-define-key
     :keymaps '(forge-post-mode-map
		forge-post-section-map
		forge-topic-list-mode-map
		forge-topic-state-section-map
		forge-topic-marks-section-map
		forge-topic-title-section-map)
     :states '(normal visual)
     ;; :prefix mpereira/leader
     "go" 'forge-browse-post)
    (message "Forge loaded  ✔"))
#+end_src
** Git Time-machine
#+begin_src emacs-lisp
  (use-package git-timemachine
    :disabled
    :after magit
    :bind (:map evil-normal-state-map
                (";gt" . git-timemachine-toggle))
    :config
    (general-define-key
     :keymaps '(git-timemachine-mode-map)
     :states '(normal)
     "B" 'git-timemachine-blame
     "b" 'git-timemachine-switch-branch
     "d" 'git-timemachine-show-commit
     "m" 'git-timemachine-show-revision-fuzzy
     "<escape>" 'git-timemachine-quit)
    (message "Git time-machine loaded  ✔"))
#+end_src
** Blamer
#+begin_src emacs-lisp
  (use-package blamer
    :disabled
    :bind (:map evil-normal-state-map
                (";gb" . blamer-mode))
    :custom
    (blamer-idle-time 0.3)
    (blamer-min-offset 70)
    :custom-face
    (blamer-face ((t :foreground "#7a88cf"
                     :background unspecified
                     :height 140
                     :italic t)))
    :config
    (message "Blamer loaded  ✔"))
#+end_src
* Developer Packages
** Programming
#+begin_src emacs-lisp

  (use-package flycheck
    :commands (flycheck-mode global-flycheck-mode))

  (use-package hl-todo
    :commands (hl-todo-mode global-hl-todo-mode)
    :config
    (setq hl-todo-keyword-faces
	  '(("TODO"   . "#FF0000")
	    ("FIXME"  . "#FF0000")
	    ("DEBUG"  . "#A020F0")
	    ("GOTCHA" . "#FF4500")
	    ("STUB"   . "#1E90FF"))))

  (use-package rainbow-mode
    :commands (rainbow-mode)
    :config
    (setq rainbow-x-colors nil)
    (message "rainbow-color loaded ✔"))

  (use-package rainbow-delimiters
    :commands (rainbow-delimiters-mode)
    :config
    (message "rainbow-delimiters loaded ✔"))


  (use-package smartparens)


  (use-package prog-mode
    :ensure nil
    :bind (:map prog-mode-map
		("C-/" . comment-dwim ))

    :hook (prog-mode . ( lambda ()
			 ;; (flyspell-prog-mode)
			 ;; (corfu-mode)
			 (company-mode)	; completion UI
			 (hl-todo-mode)
			 (smartparens-mode)
			 (rainbow-mode)
			 (rainbow-delimiters-mode)
			 (display-line-numbers-mode 1)
			 (flycheck-mode)	; linting
			 (yas-minor-mode)))	; snippet
    :config
    (setq-local visual-fill-column-width 100
		visual-fill-column-center-text t)
    (setq-local fill-column 79))
#+end_src
** Snippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :defer 2
    :hook
    (yas-minor-mode . (lambda ()
			(define-key yas-minor-mode-map (kbd "<tab>") nil)
			(define-key yas-minor-mode-map (kbd "TAB") nil)
			;; Bind 'SPC' to 'yas-expand' when snippet expansion available (it
			;; will still call 'self-insert-command' otherwise).
			(define-key yas-minor-mode-map (kbd "SPC") yas-maybe-expand)
			;; Bind `C-c y' to 'yas-expand' ONLY.
			(define-key yas-minor-mode-map (kbd "C-c y") #'yas-expand)))
    ;; (yas-activate-extra-mode 'fundamental-mode)))
    ;; (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
    :config
    (message "yasnippet loaded  ✔"))
  
  ;; :hook
  ;; (org-mode . (lambda () 
  ;;               (setq-local yas-buffer-local-condition
  ;;                           '(not (org-in-src-block-p t)))))
  ;; (yas-global-mode 1))

  (use-package yasnippet-snippets
    :after yasnippet
    :config
    (message "yasnippet snippets loaded  ✔"))

  (use-package auto-yasnippet
    :commands (aya-create
	       aya-expand
	       aya-expand-from-history
	       aya-delete-from-history
	       aya-clear-history
	       aya-next-in-history
	       aya-previous-in-history
	       aya-persist-snippet
	       aya-open-line)
    :config
    (message "auto-yasnippet loaded  ✔"))
#+end_src
#+begin_src emacs-lisp
  (use-package emmet-mode
    ;; :defer 2
    :hook
    (sgml-mode . emmet-mode) ;; Auto-start on any markup modes
    (web-mode  . emmet-mode)
    (html-mode . emmet-mode)
    (rjsx-mode . emmet-mode)
    (css-mode  . emmet-mode) ;; enable Emmet's css abbreviation.
    :bind (:map emmet-mode-keymap 
                ("C-c C-c p" . emmet-preview-mode))
    :init
    (setq
     emmet-indentation 2
     emmet-move-cursor-between-quotes t)

    :config
    (message "emmet loaded  ✔"))   ;; expand with ctrl-enter
#+end_src
** Web Mode
#+begin_src emacs-lisp
  (use-package web-mode
    ;; :init
    ;; (add-hook 'web-mode-hook 
    ;;           '(lambda ()
    ;;             (set (make-local-variable 'company-backends)
    ;;                  '(company-web-html company-css))))

    :bind (:map web-mode-map
		("C-c v" . browse-url-of-buffer))
    :hook (web-mode-before-auto-complete-hooks
	   . (lambda ()
	       (let ((web-mode-cur-language
		      (web-mode-language-at-pos)))
		 (if (string= web-mode-cur-language "php")
		     (yas-activate-extra-mode 'php-mode)
		   (yas-deactivate-extra-mode 'php-mode))
		 (if (string= web-mode-cur-language "css")
		     (setq emmet-use-css-transform t)
		   (setq emmet-use-css-transform nil)))))


    :mode (("\\.phtml\\'" . web-mode)
	   ("\\.tpl\\.php\\'" . web-mode)
	   ("\\.[agj]sp\\'" . web-mode)
	   ("\\.as[cp]x\\'" . web-mode)
	   ("\\.erb\\'" . web-mode)
	   ("\\.mustache\\'" . web-mode)
	   ("\\.djhtml\\'" . web-mode)
	   ("\\.html?\\'" . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2
	  web-mode-css-indent-offset 2
	  web-mode-code-indent-offset 2
	  web-mode-enable-engine-detection t
	  web-mode-enable-current-column-highlight t
	  web-mode-enable-current-element-highlight t
	  web-mode-engines-alist
	  '(("django" . "focus/.*\\.html\\'")
	    ("ctemplate" . "realtimecrm/.*\\.html\\'"))))

  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
	   ("\\.md\\'" . markdown-mode)
	   ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))

  (use-package css-mode
    :mode "\\.css\\'"
    :config
    (add-to-list 'company-backends 'company-css))
#+end_src
** JavaScript
#+begin_src emacs-lisp
  (use-package js-mode
    ;; :mode "\\.js\\'"
    :ensure nil
    :hook (js-mode . eglot-ensure)
    :config
    (setq js-indent-level 4))

  (use-package typescript-mode
    :hook (typescript-mode . eglot-ensure)
    :config
    (setq typescript-indent-level 4))

  (use-package rjsx-mode
    :mode "\\.js\\'"
    :hook (rjsx-mode . eglot-ensure)
    :bind (:map rjsx-mode-map
		("<" . self-insert-command))
    :config
    (setq js-jsx-indent-level 2))

  (use-package prettier-js
    :after rjsx-mode
    :hook (rjsx-mode . prettier-js-mode))

  (use-package json-mode
    :mode "\\.json\\'"
    :config
    :hook (json-mode .
		     (lambda ()
		       (make-local-variable 'js-indent-level)
		       (setq tab-width 2)
		       (setq js-indent-level 2))))

  (use-package jsonian
    :mode (("\\.json\\'" . jsonian-mode)))

  ;; (require 'dap-firefox)
  ;; (require 'dap-node)
#+end_src
** Eglot
#+begin_src emacs-lisp
  (use-package eglot
    :ensure nil
    :hook ((go-mode . eglot-ensure)
	   (web-mode . eglot-ensure)
	   (html-mode . eglot-ensure))
    :hook (eglot-managed-mode . (lambda ()
				  (remove-hook 'flymake-diagnostic-functions 'eglot-flymake-backend)))

    :bind (:map eglot-mode-map
		("C-c r" . eglot-rename)
		("C-c h" . eldoc)
		("C-c f" . eglot-format)
		("C-c F" . eglot-format-buffer))
    :config
    (add-to-list 'eglot-server-programs
		 '(web-mode . ("vscode-html-language-server" "--node-ipc"))
		 '(R-mode . ("R" "--slave" "-e" "languageserver::run()")))
    (message "eglot loaded"))

  (use-package consult-eglot
    :after eglot
    :config
    (message "consult-eglot loaded ✔"))
#+end_src
** Python
#+begin_src emacs-lisp
  ;; fix issues with python inferial process
  (use-package python
    :hook (python-mode . eglot-ensure)
    :hook (python-mode . ( lambda () (pyvenv-mode)) )
    :config
    (when (executable-find "ipython")
      (setq python-shell-interpreter "ipython"
            python-shell-interpreter-args "-i --simple-prompt --InteractiveShell.display_page=True"))

    (setq python-indent-guess-indent-offset nil
          python-indent-offset 4
          python-shell-completion-native-enable nil))

  (use-package live-py-mode
    :disabled
    ;; :requires python
    :config
    ;; (setq live-py-path "/usr/bin/python3")
    (setq live-py-version "python")
    (message "live py ready ✔"))
#+end_src
** Virtual Envs
#+begin_src emacs-lisp
  (use-package conda
    :commands (conda-env-activate-for-buffer conda-env-list conda-env-activate)
    :init
    ;; (unless (getenv "CONDA_DEFAULT_ENV")
    ;;   (conda-env-activate "base"))
    ;; (progn
    ;; (conda-env-initialize-interactive-shells)
    ;; (conda-env-initialize-eshell))

    :config
    (progn
      ;; (conda-env-initialize-interactive-shells)
      ;; (conda-env-initialize-eshell)
      (setq conda--executable-path "/Users/rwilson/opt/anaconda3/condabin/conda"
	    conda-env-home-directory (expand-file-name "~/opt/anaconda3/"))
      (custom-set-variables '(conda-anaconda-home (expand-file-name "~/opt/anaconda3/"))))
    ;;(conda-env-autoactivate-mode nil)
    (message "conda loaded  ✔"))

  (defun org-babel-execute:jupyter-advice (function &rest args)
    (unless (getenv "CONDA_DEFAULT_ENV")
      (conda-env-activate))
    (apply function args))

  (advice-add 'org-babel-execute:jupyter-python :around #'org-babel-execute:jupyter-advice)


  (use-package pyvenv 
    :requires pipenv
    :commands (pyvenv-mode)
    :config
    (message "pyvenv loaded  ✔"))


  ;; :init
  ;; (setq
  ;;  pipenv-projectile-after-switch-function
  ;;    #'pipenv-projectile-after-switch-extended))
#+end_src
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    ;; :diminish projectile-mode
    :config
    (projectile-register-project-type 'django '("manage.py")
                                      :project-file "manage.py"
                                      :compile "python manage.py runserver"
                                      :test "npm test"
                                      :run "python manage.py runserver"
                                      :test-suffix ".py")
    (projectile-mode t)
    :custom ((projectile-completion-system 'default))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :bind ((:map projectile-command-map
                 ("p" . consult-projectile-switch-project)
                 ("f" . consult-projectile-find-file)
                 ("e" . consult-projectile-recentf)
                 ("d" . consult-projectile-find-dir)))
    :init
    (when (file-directory-p "~/Projects")
      (setq projectile-project-search-path '("~/Projects")))
    (setq projectile-switch-project-action
          '(lambda ()
             (consult-grep))))

  (use-package consult-projectile
    :after (consult projectile))
#+end_src
** Universal Modeling Language
#+begin_src emacs-lisp
  (use-package plantuml-mode
    ;; :defer 3
    :mode (("\\.pu\\'" . plantuml-mode)
           ("\\.uml\\'" . plantuml-mode)
           ("\\.puml\\'" . plantuml-mode))
    :config
    ;; (setq org-plantuml-jar-path (expand-file-name "/usr/local/Cellar/plantuml/1.2022.5/libexec/plantuml.jar"))
    ;; Sample executable configuration

    ;; manage window layout
    (setq display-buffer-alist '(("\\*plantuml preview\\*"
                                  (display-buffer-reuse-window display-buffer-in-side-window)
                                  (side . right)
                                  (slot . -1)
                                  (window-width . 0.5))))

    (setq
     org-plantuml-exec-mode 'plantuml
     org-plantuml-executable-path "/usr/local/bin/plantuml")

    (setq
     plantuml-executable-path "/usr/local/bin/plantuml"
     plantuml-default-exec-mode 'executable
     plantuml-indent-level 2
     plantuml-output-type "png"))
#+end_src
** SQL  
#+begin_src emacs-lisp 
  ;;(setq-local lsp-sqls-connections
  ;;      '(((driver . "mysql") (dataSourceName . "root:root@tcp(localhost:3306)/mysql"))
  ;;       ((driver . "postgresql") (dataSourceName . "host=127.0.0.1 port=5432 user=yyoncho password=local dbname=sammy sslmode=disable"))))

  ;;(require 'lsp-sqls)
  ;;(add-hook 'sql-mode-hook 'lsp) 

  ;; (use-package sqlformat 
  ;;   ;; :defer 10
  ;;   :commands (sqlformat sqlformat-buffer sqlformat-region)
  ;;   ;; :hook (sql-mode . sqlformat-on-save-mode)
  ;;   :init
  ;;   (setq sqlformat-command 'sqlformat
  ;;         sqlformat-args '("-kupper")))

  (add-hook 'sql-interactive-mode-hook
          (lambda ()
            (toggle-truncate-lines t)))

  (setq sql-sqlite-options '("-table"))
(setq sql-connection-alist
    '((pgsql-prod (sql-product 'postgres)
		    (sql-port 5432)
		    (sql-server "localhost")
		    (sql-user "postgres")
		    (sql-password "root")
		    (sql-database ""))
	(pgsql-staging (sql-product 'postgres)
			(sql-port 5432)
			(sql-server "db.staging.com")
			(sql-user "user")
			(sql-password "password")
			(sql-database "my-app"))
	(mysql-dev (sql-product 'mysql)
		    (sql-port 3306)
		    (sql-server "localhost")
		    (sql-user "root")
		    (sql-password "root")
		    (sql-mysql-options '("--protocol=tcp"))
		    (sql-database ""))))
#+end_src
** Rest Client
#+begin_src emacs-lisp
(use-package restclient
;; :defer 2
:mode ("\\.http\\'" . restclient-mode)
;; :hook (restclient-mode . company-mode)
:bind (:map restclient-mode-map
	    ("C-c C-f" . json-mode-beautify))
:config
(message "restclient loaded"))
#+end_src
** Yaml
#+begin_src emacs-lisp
(use-package yaml-mode 
;; :defer 2
:mode (("\\.yaml\\'" . yaml-mode)
	("\\.yml\\'" . yaml-mode))
:bind ((:map yaml-mode-map
		("\C-m" . 'newline-and-indent)))
:config
(message "yaml loaded"))
#+end_src
** Graphql
#+begin_src emacs-lisp
  (use-package graphql-mode
  :commands (graphql-mode)
  :config
  (message "graphql loaded"))
#+end_src
* Data Science
** Jupyter
#+begin_src emacs-lisp
(use-package jupyter
;; :defer 2
;; :requires (zmq org python)
:commands (jupyter-run-server-repl
	    jupyter-run-repl
	    jupyter-server-list-kernels)
:init (eval-after-load 'jupyter-org-extensions ; conflicts with my helm config, I use <f2 #>
	'(unbind-key "C-c h" jupyter-org-interaction-mode-map))
:config
(message "jupyter ready ✔"))
#+end_src
** ESS
#+begin_src emacs-lisp
  (use-package ess
    ;; :hook (R-mode . eglot-ensure)
    :commands (ess-mode)
    :custom
    (inferior-ess-fix-misaligned-output t)
    (ess-eldoc-show-on-symbol t)
    (ess-gen-proc-buffer-name-function 'ess-gen-proc-buffer-name:projectile-or-directory)
    (ess-eval-visibly nil); "Don't hog Emacs"
    (ess-style 'RStudio)
    (ess-use-flymake nil) ;"Syntax checking is usually not helpful"
    ;; (ess-tab-complete-in-script nil) ;"Do not interfere with Company"
    ;; (ess-use-ido nil) ;"Prefer Ivy/Counsel"
    ;; (ess-history-directory (expand-file-name "ESS-history/" no-littering-var-directory))
    (inferior-R-args "--no-save")
    (ess-ask-for-ess-directory nil)
    ;; (ess-smart-S-assign-key nil)
    ;; (ess-indent-with-fancy-comments nil)
    :config
    (setq ess-use-company t)
    (setq ess-can-eval-in-background nil)

    (setq ess--command-default-timeout 1)
    (message "ESS loaded ✔"))

  (use-package ess-view-data
    :after (ess)
    :config
    (message "ESS View loaded ✔"))
#+end_src
;; :defer 5)
#+begin_src emacs-lisp
  (use-package gnuplot
  :after (org gnuplot)
  :config
  (message "gnuplot loaded"))

  (use-package gnuplot-mode
  :commands (gnuplot-mode)
  :mode ("\\.gplot\\'" . gnuplot-mode)
  :config
  (message "gnuplot mode loaded"))
#+end_src
** Ledger
#+begin_src emacs-lisp
(use-package hledger-mode
:disabled
;; :defer 2

;; To open files with .journal extension in hledger-mode
:mode ("\\.journal\\'" . hledger-mode)
:config

;; Provide the path to you journal file.
;; The default location is too opinionated.
;; (setq hledger-jfile "/path/to/your/journal-file.journal")

;; Auto-completion for account names
;; For company-mode users,
(add-to-list 'company-backends 'hledger-company)
(message "hledger loaded  ✔"))
#+end_src
* Writing
** Grammar 
#+begin_src emacs-lisp
(add-to-list 'ispell-skip-region-alist '("#\\+begin_src" . "#\\+end_src"))

(use-package text-mode
:ensure nil
:hook (text-mode . flyspell-mode))

(use-package flyspell-lazy
;; :defer 5
:after flyspell

;; :bind ((:map flyspell-mode-map
;;              ("C-;" . nil)))

:config
(setq flyspell-lazy-idle-seconds 2))
#+end_src
** Lang tools
#+begin_src emacs-lisp
(use-package flycheck-languagetool 	
:disabled
;; :defer 10
:ensure t
:hook (text-mode . flycheck-languagetool-setup)
:init
(setq flycheck-languagetool-server-jar "~/bin/LanguageTool-5.7/languagetool-server.jar"))
#+end_src
** Dictionary & Thesaurus 
#+begin_src emacs-lisp
  (use-package dictionary
    :commands (dictionary)
    :config
    (message "dictionary loaded ✔"))
#+end_src
** Latex
#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex

    :bind ((:map TeX-mode-map
		 ("<tab> TAB" . TeX-complete-symbol)))

    :hook (TeX-mode . ( lambda ()
			;; (corfu-mode)
			(hl-todo-mode)
			(company-mode)
			(display-line-numbers-mode 1)))
    :config
    ;; Turn on RefTeX in AUCTeX
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    ;; Activate nice interface between RefTeX and AUCTeX
    (setq reftex-plug-into-AUCTeX t)
    (message "AUCTeX ready ✔"))

  (use-package latex-preview-pane
    :after tex
    :config
    (setq latex-preview-pane-use-frame nil)
    (latex-preview-pane-enable))

#+end_src
** Bibtex
#+begin_src emacs-lisp
  ;; https://kristofferbalintona.me/posts/202206141852/
  (use-package citar
    :after org
    :custom-face
    ;; Have citation link faces look closer to as they were for `org-ref'
    ;; (org-cite ((t (:foreground "DarkSeaGreen4"))))
    ;; (org-cite-key ((t (:slant italic))))

    :bind(:map org-mode-map
	       :package org ("C-c b" . #'org-cite-insert))



    ;; optional: org-cite-insert is also bound to C-c C-x C-@
    :config
    (setq org-cite-global-bibliography'("~/Documents/bib/emacs-bibs/references.bib"
					"~/Documents/bib/emacs-bibs/dei.bib"
					"~/Documents/bib/emacs-bibs/master.bib"
					"~/Documents/bib/emacs-bibs/archive.bib")
	  org-cite-insert-processor 'citar
	  org-cite-follow-processor 'citar
	  org-cite-activate-processor 'citar
	  citar-bibliography org-cite-global-bibliography)

    (setq citar-notes-paths '("~/Documents/bib/bibtex-notes/")
	  citar-library-paths '("~/Documents/bib/bibtex-pdfs/"))

    (setq bibtex-autokey-year-length 4
	  bibtex-autokey-name-year-separator "-"
	  bibtex-autokey-year-title-separator "-"
	  bibtex-autokey-titleword-separator "-"
	  bibtex-autokey-titlewords 2
	  bibtex-autokey-titlewords-stretch 1
	  bibtex-autokey-titleword-length 5
	  bibtex-dialect 'biblatex)

    (setq bibtex-completion-bibliography '("~/Documents/bib/emacs-bibs/references.bib"
					   "~/Documents/bib/emacs-bibs/dei.bib"
					   "~/Documents/bib/emacs-bibs/master.bib"
					   "~/Documents/bib/emacs-bibs/archive.bib")
	  bibtex-completion-library-path '("~/Documents/bib/bibtex-pdfs/")
	  bibtex-completion-notes-path "~/Documents/bib/bibtex-notes/"
	  bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"

	  bibtex-completion-additional-search-fields '(keywords)
	  bibtex-completion-display-formats
	  '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
	    (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
	    (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	    (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	    (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
	  bibtex-completion-pdf-open-function
	  (lambda (fpath)
	    (call-process "open" nil 0 nil fpath))))

  (use-package citar-embark
    :after  citar-embark)

  (use-package org-roam-bibtex ; optional: if using Org-ref v2 or v3 citation links
    :after org-roam)
  ;; :config
  ;; (require 'org-ref)

  ;; (use-package org-ref
  ;;   :bind (:map bibtex-mode-map
  ;;               ("H-b" . org-ref-bibtex-hydra/body)
  ;;               (:map biblio-selection-mode-map
  ;;                     ("k" . biblio--selection-previous)
  ;;                     ("j" . biblio--selection-next)))
  ;;   :config
  ;;   (setq org-ref-bibtex-hydra-key-binding (kbd "H-b")))
#+end_src
** PDF Tools
#+begin_src emacs-lisp
  ;;   (use-package pdf-tools
  ;;     :ensure t
  ;;     :config
  ;;     (defun pdf-password-protect ()
  ;;       "Password protect current pdf in buffer or `dired' file."
  ;;       (interactive)
  ;;       (unless (executable-find "qpdf")
  ;; 	(user-error "qpdf not installed"))
  ;;       (unless (equal "pdf"
  ;; 		     (or (when (buffer-file-name)
  ;; 			   (downcase (file-name-extension (buffer-file-name))))
  ;; 			 (when (dired-get-filename nil t)
  ;; 			   (downcase (file-name-extension (dired-get-filename nil t))))))
  ;; 	(user-error "no pdf to act on"))
  ;;       (let* ((user-password (read-passwd "user-password: "))
  ;; 	     (owner-password (read-passwd "owner-password: "))
  ;; 	     (input (or (buffer-file-name)
  ;; 			(dired-get-filename nil t)))
  ;; 	     (output (concat (file-name-sans-extension input)
  ;; 			     "_enc.pdf")))
  ;; 	(message
  ;; 	 (string-trim
  ;; 	  (shell-command-to-string
  ;; 	   (format "qpdf --verbose --encrypt %s %s 256 -- %s %s"
  ;; 		   user-password owner-password input output))))))

  ;;     ;; Use brew upgrade pdf-tools instead.
  ;;     (custom-set-variables '(pdf-tools-handle-upgrades nil)) 
  ;;     (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")

  ;;     ;; (add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode)
  ;;     (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
  ;;     (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
  ;;     (setq TeX-source-correlate-method 'synctex)
  ;;     (setq TeX-source-correlate-start-server t))


  ;; ;; In saveplace-pdf-view-find-file:
  ;; ;; saveplace-pdf-view.el:57:26: Warning: ‘load-save-place-alist-from-file’ is an obsolete function (as of 29.1); use ‘save-place-load-alist-from-file’ instead.

  ;; ;; In saveplace-pdf-view-to-alist:
  ;; ;; saveplace-pdf-view.el:76:26: Warning: ‘load-save-place-alist-from-file’ is an obsolete function (as of 29.1); use ‘save-place-load-alist-from-file’ instead.
  ;; ;; Compilation finished.

  ;; (use-package saveplace-pdf-view 
  ;;     :init
  ;;     (save-place-mode 1))


  ;;   (use-package org-noter
  ;;     :init
  ;;     (use-package org-noter-pdftools
  ;;       :after  pdf-tools))

  ;;   (pdf-tools-install)
#+end_src
* Email
** Email Global Variables
#+begin_src emacs-lisp
  (setq
   user-full-name               "Ramus Jabee Lloyd Wilson"
   user-mail-address            "ramus@rjlwjr.com"
   send-mail-function		'smtpmail-send-it

   message-send-mail-function	'smtpmail-send-it
   message-default-mail-headers "Cc: \nBcc: \n"

   smtpmail-smtp-server         "smtp.mail.me.com"
   smtpmail-smtp-service        587
   smtpmail-stream-type         'starttls

   mail-user-agent 'mu4e-user-agent)
#+end_src
** Mu4e Function
#+begin_src emacs-lisp
  (defun diary-from-outlook-mu4e (&optional noconfirm)
    "Maybe snarf diary entry from Outlook-generated message in Gnus.
  Unless the optional argument NOCONFIRM is non-nil (which is the case when
  this function is called interactively), then if an entry is found the
  user is asked to confirm its addition.
  Add this function to `gnus-article-prepare-hook' to notice appointments
  automatically."
    (interactive "p")
    (with-current-buffer gnus-article-buffer
      (let ((subject (gnus-fetch-field "subject"))
	    (body (if gnus-article-mime-handles
		      ;; We're multipart.  Don't get confused by part
		      ;; buttons &c.  Assume info is in first part.
		      (mm-get-part (nth 1 gnus-article-mime-handles))
		    (save-restriction
		      (gnus-narrow-to-body)
		      (buffer-string)))))
	(when (diary-from-outlook-internal subject body t)
	  (when (or noconfirm (y-or-n-p "Snarf diary entry? "))
	    (diary-from-outlook-internal subject body)
	    (message "Diary entry added"))))))

  (defun do.mail.html/render-pdf (msg)
    "Attempt to render body of MSG as PDF and display in current buffer."
    (let ((msg2pdf (executable-find "wkhtmltopdf"))
	  (buf (get-buffer-create "*rendered mail*"))
	  (tmpfile (make-temp-file "pdfmailrender")))
      (unless msg2pdf
	(mu4e-error "wkhtmltopdf not found"))
      (unless (mu4e-message-has-field msg :body-html)
	(mu4e-error "message has no html."))
      ;; convert message body to PDF
      (with-temp-buffer
	(insert (mu4e-message-field msg :body-html))
	(shell-command-on-region
	 (point-min) (point-max)
	 (concat msg2pdf " -s Letter --quiet - "
		 tmpfile
		 " 2>/dev/null") nil nil nil nil nil))
      ;; display in current window
      (switch-to-buffer buf)
      (read-only-mode -1)
      (erase-buffer)
      (insert-file-contents tmpfile)
      (doc-view-mode)
      (delete-file tmpfile)))

  (defun efs/store-link-to-mu4e-query ()
    (interactive)
    (let ((org-mu4e-link-query-in-headers-mode t))
      (call-interactively 'org-store-link)))

  (defun mu4e-action-save-to-pdf (msg)
    (let* ((date (mu4e-message-field msg :date))
	   (infile (mu4e~write-body-to-html msg))
	   (dir (read-directory-name "Directory:"))
	   (outfile (format-time-string "%Y-%m-%d%H%M%S.pdf" date)))
      (with-temp-buffer
	(shell-command
	 (format "wkhtmltopdf %s %s%s" infile dir outfile) t))
      (message "output file %s" outfile)))

  (defun efs/capture-mail-follow-up (msg)
    (interactive)
    (call-interactively 'org-store-link)
    (org-capture nil "ef"))

  (defun efs/capture-mail-read-later (msg)
    (interactive)
    (call-interactively 'org-store-link)
    (org-capture nil "er"))

  ;; add option to view as pdf.
  ;; (add-to-list 'mu4e-view-actions '("Save to PDF" . mu4e-action-save-to-pdf) t)
#+end_src
** Mu4e Context
#+begin_src emacs-lisp
  ;; (add-hook 'mail-citation-hook 'sc-cite-original)
  (use-package mu4e
    :ensure nil
    :defer 3
    :commands (mu4e)
    :load-path "/usr/local/share/emacs/site-lisp/mu/mu4e"

    :hook (mu4e-view-mode lambda ()
			  (mu4e-icalendar-setup)
			  (gnus-icalendar-org-setup))

    :config
    (setq mu4e-maildir "~/Mail"
	  mu4e-get-mail-command "mbsync -a"
	  mu4e-change-filenames-when-moving t
	  mu4e-compose-format-flowed t
	  message-kill-buffer-on-exit t
	  ;; Refresh mail using isync every 10 minutes
	  mu4e-update-interval (* 10 60)
	  shr-color-visible-luminance-min 80
	  mu4e-context-policy 'pick-first
	  read-mail-command 'mu4e)

    (setq mu4e-text2speech-command "espeak")

    (require 'mu4e-icalendar)
    (setq mu4e-view-use-gnus t
	  mu4e-icalendar-diary-file "~/.emacs.d/diary"
	  gnus-icalendar-org-capture-file "~/org/beorg/org/Mails.org"
	  ;;make sure to create Calendar heading first
	  gnus-icalendar-org-capture-headline '("Calendar"))

    (setq mu4e-use-fancy-chars t
	  mu4e-headers-unread-mark    '("u" . "📩 ")
	  mu4e-headers-draft-mark     '("D" . "🚧 ")
	  mu4e-headers-flagged-mark   '("F" . "🚩 ")
	  mu4e-headers-new-mark       '("N" . "✨ ")
	  mu4e-headers-passed-mark    '("P" . "↪ ")
	  mu4e-headers-replied-mark   '("R" . "↩ ")
	  mu4e-headers-seen-mark      '("S" . " ")
	  mu4e-headers-trashed-mark   '("T" . "🗑️")
	  mu4e-headers-attach-mark    '("a" . "📎 ")
	  mu4e-headers-encrypted-mark '("x" . "🔑 ")
	  mu4e-headers-signed-mark    '("s" . "🖊 "))

    (setq mu4e-view-prefer-html nil
	  mu4e-completing-read-function 'completing-read)

    (add-to-list 'mu4e-view-actions
		 '("Save to PDF" . do.mail.html/render-pdf) t)

    ;; Add custom actions for our capture templates
    (add-to-list 'mu4e-headers-actions
		 '("follow up" . efs/capture-mail-follow-up) t)

    (add-to-list 'mu4e-headers-actions
		 '("read later" . efs/capture-mail-read-later) t)

    (add-to-list 'mu4e-view-actions
		 '("follow up" . efs/capture-mail-follow-up) t)

    (add-to-list 'mu4e-view-actions
		 '("read later" . efs/capture-mail-read-later) t)

    ;; Wrap text in messages
    (add-hook 'mu4e-view-mode-hook
	      (lambda () (setq-local truncate-lines nil)))

    (add-hook 'mu4e-compose-mode-hook
	      (lambda ()
		(turn-off-auto-fill)
		(use-hard-newlines -1)))

    (setq mu4e-bookmarks
	  '(("date:today" "Today" ?t)
	    ("flag:unread"  "Unread" ?u)
	    ("flag:unread to:ramus@rjlwjr.com OR ramus_wilson@icloud.com" "Icloud Unread" ?i)
	    ("flag:unread to:ramuswilson@gmail.com" "Gmail Unread" ?g)
	    ("flag:unread to:ramuswilson@outlook.com" "Outlook Unread" ?o)
	    ("prio:high" "High priority" ?h)
	    ("flag:attach" "Attachment" ?a)
	    ("flag:trashed" "Trashed" ?x)))

    ;; set mailbox context
    (setq mu4e-contexts
	  (list
	   ;; Personal Gmail account
	   (make-mu4e-context
	    :name "Gmail"
	    :match-func
	    (lambda (msg)
	      (when msg
		(string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
	    :vars '((user-mail-address . "ramuswilson@gmail.com")

		    (smtpmail-smtp-server  . "smtp.gmail.com")
		    (smtpmail-smtp-service . 587)
		    (smtpmail-stream-type  . starttls)

		    (mu4e-drafts-folder  . "/Gmail/[Gmail]/Drafts")
		    (mu4e-sent-folder  . "/Gmail/[Gmail]/Sent Mail")
		    (mu4e-refile-folder  . "/Gmail/[Gmail]/All Mail")
		    (mu4e-trash-folder  . "/Gmail/[Gmail]/Trash")

		    ;; (mu4e-maildir-shortcuts . (("/Gmail/Inbox"            . ?i)
		    ;;                            ("/Gmail/[Gmail]/Sent Mail" . ?s)
		    ;;                            ("/Gmail/[Gmail]/Trash"     . ?t)
		    ;;                            ("/Gmail/[Gmail]/Drafts"    . ?d)
		    ;;                            ("/Gmail/[Gmail]/All Mail"  . ?a)))
		    ))

	   ;; Personl Outlook account
	   (make-mu4e-context
	    :name "Outlook"
	    :match-func
	    (lambda (msg)
	      (when msg
		(string-prefix-p "/Outlook" (mu4e-message-field msg :maildir))))
	    :vars '((user-mail-address . "ramuswilson@outlook.com")

		    (smtpmail-smtp-server  . "smtp.office365.com")
		    (smtpmail-smtp-service . 587)
		    (smtpmail-stream-type  . starttls)

		    (mu4e-drafts-folder  . "/Outlook/Drafts")
		    (mu4e-sent-folder  . "/Outlook/Sent")
		    (mu4e-refile-folder  . "/Outlook/Inbox")
		    (mu4e-trash-folder  . "/Outlook/Archive")

		    ;; (mu4e-maildir-shortcuts . (("/Outlook/Inbox"           . ?i)
		    ;;                            ("/Outlook/Sent"            . ?s)
		    ;;                            ("/Outlook/Archive"         . ?t)
		    ;;                            ("/Outlook/Drafts"          . ?d)
		    ;;                            ("/Outlook"                 . ?a)))
		    ))


	   (make-mu4e-context
	    :name "Icloud"
	    :match-func
	    (lambda (msg)
	      (when msg
		(string-prefix-p "/Icloud" (mu4e-message-field msg :maildir))))
	    :vars '((user-mail-address . "ramus@rjlwjr.com")
		    (mu4e-drafts-folder  . "/Icloud/Drafts")
		    (mu4e-sent-folder  . "/Icloud/Sent Messages")
		    (mu4e-refile-folder  . "/Icloud/Inbox")
		    (mu4e-trash-folder  . "/Icloud/Archive")

		    (smtpmail-smtp-server  . "smtp.mail.me.com")
		    (smtpmail-smtp-service . 587)
		    (smtpmail-stream-type  . starttls)

		    ;; (mu4e-maildir-shortcuts . (("/Icloud/Inbox"           . ?i)
		    ;;                            ("/Icloud/Sent Messages"   . ?s)
		    ;;                            ("/Icloud/Archive"         . ?t)
		    ;;                            ("/Icloud/Drafts"          . ?d)
		    ;;                            ("/Icloud"                 . ?a)))
		    ))))

    (message "mu4e loaded  ✔"))
#+end_src

** MU4E Alert
#+begin_src emacs-lisp
  (use-package mu4e-alert
    :defer 3 
    :requires alert
    :custom((doom-modeline-mu4e t)
	    (mu4e-alert-style 'notifier))
    :config
    ;; (setq mu4e-alert-icon "~/.emacs.d/e-mail.svg")
    (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
    (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
    (setq alert-default-style 'notifier)
    (message "mu4e-alert ready ✔"))
#+end_src
** GNUS function
#+begin_src emacs-lisp
  (require 'gnus-dired)
  ;; make the `gnus-dired-mail-buffers' function also work on
  ;; message-mode derived modes, such as mu4e-compose-mode
  (defun gnus-dired-mail-buffers ()
    "Return a list of active message buffers."
    (let (buffers)
      (save-current-buffer
        (dolist (buffer (buffer-list t))
          (set-buffer buffer)
          (when (and (derived-mode-p 'message-mode)
                     (null message-sent-message-via))
            (push (buffer-name buffer) buffers))))
      (nreverse buffers)))

  (setq gnus-dired-mail-mode 'mu4e-user-agent)
  (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
#+end_src
** Epg Configuration
#+begin_src emacs-lisp
  ;; (require 'epg-config)
  ;; (setq mml2015-use 'epg
  ;;       epg-user-id "66F8C595B114BDB92A14C0CA0008C56CA8D4A32E"
  ;;       mml2015-encrypt-to-self t
  ;;       mml2015-sign-with-sender t)
#+end_src
** Org MSG
#+begin_src emacs-lisp
      (use-package org-msg
	:defer 3
	:after mu4e
	:hook (message-mode lambda ()
			    (org-msg-mode)
			    (flyspell-mode))

	:config
	(setq org-msg-options "tex:dvisvgm html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
	      org-msg-startup "hidestars indent inlineimages"
	      org-msg-greeting-name-limit 3
	      org-msg-default-alternatives '((new		. (text html))
					     (reply-to-html	. (text html))
					     (reply-to-text	. (text)))
	      org-msg-convert-citation t
	      org-msg-greeting-fmt "\nHi%s,\n\n"
	      org-msg-signature
    "
    Regards,

    #+begin_signature
    ---------------------------
    *Ramus Jabee Lloyd Wilson*
    ICT Consultant | Smile Technology LLC
    /email: ramus@rjlwjr.com/
    /work-email: ramus.wilson@smiletech.com/
    /mobile phone: +231-77-797-8125 +231-88-697-8125/
    /The simple act of paying attention can take you a long way/
    send from Gnus Emacs mu4e client
    #+end_signature")
    (message "org-msg ready ✔"))
#+end_src
* Org Mode
** Evil Org 
#+begin_src emacs-lisp
  (use-package evil-org
    :after (evil org)
    :config
    (setq evil-want-C-i-jump nil)
    (message "evil org ready ✔"))
#+End_src
** Custom function
#+begin_src emacs-lisp

  ;; Org Mode Configuration ------------------------------------------------------
  (defun efs/org-mode-setup ()
    (org-indent-mode -1)
    ;; (visual-line-mode 1)
    (evil-org-mode)
    (visual-fill-column-mode 1)
    ;; (hl-todo-mode)
    (setq-local truncate-lines t)

    (setq-local visual-fill-column-width 100
		visual-fill-column-center-text t)

    (variable-pitch-mode 1))

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
			    '(("^ *\\([-]\\) "
			       (0 (prog1 ()
				    (compose-region (match-beginning 1) (match-end 1) "➣"))))))
    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
		    (org-level-2 . 1.1)
		    (org-level-3 . 1.05)
		    (org-level-4 . 1.0)
		    (org-level-5 . 1.1)
		    (org-level-6 . 1.1)
		    (org-level-7 . 1.1)
		    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "ETBembo" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src
** Org
#+begin_src emacs-lisp
  (use-package org

    :hook ((org-mode . ( lambda ()
			 (org-modern-mode 1)
			 (efs/org-mode-setup)))
	   (outline-mode . org-modern-mode))


    :bind (("C-c l" . org-store-link)
	   ("C-c c" . org-capture) 
	   :map org-mode-map
	   ("C-/" . org-comment-dwim )
	   ("S-<backspace>" . org-table-blank-field))

    :config
    ;; (setq org-display-remote-inline-images 'cache) ; org-version 9.5 not working
    (setq org-use-property-inheritance t)
    (setq org-directory (concat (getenv "HOME") "/org"))
    (setq org-ellipsis " ⤸")
    (setq org-log-done '(time note))
    (setq org-startup-folded t)
    (setq org-log-into-drawer t)
    (setq org-startup-indented nil)
    (setq org-hide-emphasis-markers t)

    (setq my/org-latex-scale 2)
    (setq org-preview-latex-default-process 'dvisvgm)
    (setq org-format-latex-options (plist-put org-format-latex-options
					      :scale my/org-latex-scale))

    (setq org-cite-csl-styles-dir "~/Zotero/styles")

    (setq org-todo-keywords
	  '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
	    (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
	  '((nil :maxlevel . 4)
	    ("Archive.org" :maxlevel . 1)
	    ("Tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
	  '((:startgroup)
	    ;; Put mutually exclusive tags here
	    (:endgroup)
	    ("note" . ?n)
	    ("@home" . ?H)
	    ("@work" . ?W)
	    ("batch" . ?b)
	    ("agenda" . ?a)
	    ("publish" . ?P)
	    ("@errand" . ?E)
	    ("planning" . ?p)
	    ("idea" . ?i)))


    (setq org-capture-templates
	  '(("t" "Tasks / Projects")
	    ("tt" "Task" entry (file+olp "~/org/beorg/org/Tasks.org" "Inbox")
	     "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

	    ("j" "Journal Entries")
	    ("jj" "Journal" entry
	     (file+olp+datetree "~/org/beorg/org/Journal.org")
	     "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
	     ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
	     :clock-in :clock-resume
	     :empty-lines 1)
	    ("jm" "Meeting" entry
	     (file+olp+datetree "~/org/beorg/org/Journal.org")
	     "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
	     :clock-in :clock-resume
	     :empty-lines 1)

	    ("e" "Email Workflow")
	    ("ef" "Follow Up" entry (file+olp "~/org/beorg/org/Mails.org" "Follow Up")
	     "* TODO Follow up with %:fromname on %a\nSCHEDULED:%t\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n\n%i" :immediate-finish t)
	    ("er" "Read Later" entry (file+olp "~/org/beorg/org/Mails.org" "Read Later")
	     "* TODO Read %:subject\nSCHEDULED:%t\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n\n%a\n\n%i" :immediate-finish t)

	    ("w" "Workflows")
	    ("we" "Checking Email" entry (file+olp+datetree "~/org/beorg/org/Journal.org")
	     "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

	    ("m" "Metrics Capture")
	    ("mw" "Weight" table-line (file+headline "~/org/beorg/org/Metrics.org" "Weight")
	     "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))
    (message "org ready ✔"))

  ;; (define-key global-map (kbd "C-c j")
  ;;   (lambda () (interactive) (org-capture nil "jj")))
  ;; (efs/org-font-setup))

  ;;     (use-package visual-fill-column
  ;;       :hook (org-mode . efs/org-mode-visual-fill))

  ;; (lambda () efs/org-mode-visual-fill ()
  ;;       (setq visual-fill-column-width 100
  ;;             visual-fill-column-center-text t)
  ;;       (visual-fill-column-mode 1))


#+end_src
** Org-Agenda
#+begin_src emacs-lisp
  (use-package org-agenda
    :ensure nil
    :after org
    :commands (org-agenda)
    :bind (("C-c a" . org-agenda))
    :init
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)

    :config
    (setq org-agenda-include-diary t)
    (setq org-agenda-start-with-log-mode t)
    (setq org-agenda-files '("~/org/beorg/org/Tasks.org"
			     "~/org/beorg/org/Habits.org"
			     "~/org/beorg/org/Mails.org"
			     "~/org/beorg/org/Birthdays.org"))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
	  '(("d" "Dashboard"
	     ((agenda "" ((org-deadline-warning-days 7)))
	      (todo "NEXT"
		    ((org-agenda-overriding-header "Next Tasks")))
	      (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

	    ("n" "Next Tasks"
	     ((todo "NEXT"
		    ((org-agenda-overriding-header "Next Tasks")))))

	    ("W" "Work Tasks" tags-todo "+work-email")

	    ;; Low-effort next actions
	    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
	     ((org-agenda-overriding-header "Low Effort Tasks")
	      (org-agenda-max-todos 20)
	      (org-agenda-files org-agenda-files)))

	    ("w" "Workflow Status"
	     ((todo "WAIT"
		    ((org-agenda-overriding-header "Waiting on External")
		     (org-agenda-files org-agenda-files)))
	      (todo "REVIEW"
		    ((org-agenda-overriding-header "In Review")
		     (org-agenda-files org-agenda-files)))
	      (todo "PLAN"
		    ((org-agenda-overriding-header "In Planning")
		     (org-agenda-todo-list-sublevels nil)
		     (org-agenda-files org-agenda-files)))
	      (todo "BACKLOG"
		    ((org-agenda-overriding-header "Project Backlog")
		     (org-agenda-todo-list-sublevels nil)
		     (org-agenda-files org-agenda-files)))
	      (todo "READY"
		    ((org-agenda-overriding-header "Ready for Work")
		     (org-agenda-files org-agenda-files)))
	      (todo "ACTIVE"
		    ((org-agenda-overriding-header "Active Projects")
		     (org-agenda-files org-agenda-files)))
	      (todo "COMPLETED"
		    ((org-agenda-overriding-header "Completed Projects")
		     (org-agenda-files org-agenda-files)))
	      (todo "CANC"
		    ((org-agenda-overriding-header "Cancelled Projects")
		     (org-agenda-files org-agenda-files)))))))

    (message "org-agenda ready ✔"))
#+end_src
** Org Protocol
#+begin_src emacs-lisp
  (use-package org-protocol
    :ensure nil
    :after org
    :config
    (message "org-protocol ready ✔"))
#+end_src
** Org Habit
#+begin_src emacs-lisp
  (use-package org-habit
    :ensure nil
    :after org
    :config (progn
              (add-to-list 'org-modules 'org-habit)
              (setq org-habit-graph-column 60))
    (message "org-habit ready ✔"))
#+end_src
** Org Babel 
#+begin_src emacs-lisp
  (use-package ob-napkin
    :after ob
    :config
    (add-to-list 'org-src-lang-modes '("napkin-puml" . plantuml))
    (message "ob-napkin ready ✔"))

  (use-package ob-sql-mode
    :ensure nil
    :after ob
    ;; :init (require 'ob-sql-mode)
    :config
    (setq org-confirm-babel-evaluate
	  (lambda (lang body)
	    (not (string= lang "sql-mode"))))
    (message "ob-sql ready ✔"))

  (use-package ob-restclient
    :after ob
    :config
    (add-to-list 'org-src-lang-modes '("restclient" . restclient))
    (message "ob-restclient ready ✔"))

  (use-package ob
    :ensure nil
    :hook (org-babel-after-execute . org-redisplay-inline-images)
    :config (progn
	      ;; load more languages for org-babel
	      (org-babel-do-load-languages
	       'org-babel-load-languages
	       '((C . t)
		 (R . t)
		 (lua . t)
		 (sqlite . t)
		 (shell . t)
		 (julia . t)
		 (latex . t)
		 (python . t)
		 (gnuplot . t)
		 (plantuml . t)
		 (restclient . t)
		 (emacs-lisp . t)
		 (jupyter . t)))
	      ;; (setq org-babel-default-header-args:sh    '((:results . "output replace"))
	      ;;       org-babel-default-header-args:bash  '((:results . "output replace"))
	      ;;       org-babel-default-header-args:shell '((:results . "output replace"))
	      ;;       org-babel-default-header-args:python '((:results . "output replace")))
	      (add-to-list 'org-src-lang-modes (quote ("plantuml" . plantuml)))))
#+end_src

** Org Tempo
#+begin_src emacs-lisp
  (use-package org-tempo
    :ensure nil
    :after org
    :config (progn
	      (add-to-list 'org-structure-template-alist '("R"  . "src R"))
	      (add-to-list 'org-structure-template-alist '("cl" . "src C"))
	      (add-to-list 'org-structure-template-alist '("cp" . "src C++"))
	      (add-to-list 'org-structure-template-alist '("gp" . "src gnuplot"))
	      (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
	      (add-to-list 'org-structure-template-alist '("jp" . "src jupyter-python"))
	      (add-to-list 'org-structure-template-alist '("jr" . "src jupyter-r"))
	      (add-to-list 'org-structure-template-alist '("np" . "src napkin"))
	      (add-to-list 'org-structure-template-alist '("pu" . "src plantuml"))
	      (add-to-list 'org-structure-template-alist '("py" . "src python"))
	      (add-to-list 'org-structure-template-alist '("rc" . "src restclient"))
	      (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
	      ;;(add-to-list 'org-structure-template-alist '("npp". "src napkin-puml"))
	      (add-to-list 'org-structure-template-alist '("sql". "src sql-mode"))))
#+end_src
** Org Modern
#+begin_src emacs-lisp
  (use-package org-modern
    :after org
    :config
    (setq org-modern-star '("" "" "" "" "")))
#+end_src
** Ox Reveal
#+begin_src emacs-lisp
  (use-package ox-reveal
    :defer 5
    :after org  
    :config
    (message "ox-reveal ready"))
#+end_src
** Org Present
#+begin_src emacs-lisp
  (use-package org-present
    :after org
    :config
    (message "org-present loaded"))
#+end_src
** Org Alert
#+begin_src emacs-lisp
  (use-package org-alert
    ;; :defer 3
    :custom (alert-default-style 'notifications)
    ;; :custom (alert-default-style 'fringe)
    :after (org alert)
    :config
    (setq org-alert-interval 300
          org-alert-notification-title "Org Alert Reminder")
    (org-alert-enable)
    (message "org-alert ready ✔"))
#+end_src
** Org remark
#+begin_src emacs-lisp
  (use-package org-remark
    :disabled
    ;; :defer 10
    :after org
    :config
    (org-remark-create "memorize"
                       '(:foreground "white" :underline "black")
                       '(CATEGORY "exam"))
    (org-remark-create "magnet"
                       '(modus-themes-nuanced-magenta))
    (message "org-remark ready ✔"))
#+end_src
** Org Transclusion
#+begin_src emacs-lisp
  (use-package org-transclusion
    :disabled
    :after org
    ;; :defer 5
    :config
    (message "org-transclusion ready ✔"))
#+end_src

** Org Pandoc
#+begin_src emacs-lisp
  (use-package ox-pandoc
      :after org
      ;; :defer 5
      :config
      (message "Ox Pandoc ready ✔"))
#+end_src
* Pretty Symbols
** Org Symbols
#+begin_src emacs-lisp
  ;; (defun my/org-mode/load-prettify-symbols ()
  ;;   (interactive)
  ;;   "Beautify org mode keywords."
  ;;   (setq prettify-symbols-alist '(("TODO" . " ")
  ;;                                  ("WAIT" . "")        
  ;;                                  ("NOPE" . "")
  ;;                                  ("DONE" . "")
  ;;                                  ("[#A]" . "")
  ;;                                  ("[#B]" . "")
  ;;                                  ("[#C]" . "")
  ;;                                  ("[ ]" . "")
  ;;                                  ("[X]" . "")
  ;;                                  ("[-]" . "")
  ;;                                  ("#+BEGIN_SRC" . " ")
  ;;                                  ("#+END_SRC" . "―")
  ;;                                  (":PROPERTIES:" . "")
  ;;                                  ("#+PROPERTY:" . "")
  ;;                                  (":END:" . "―")
  ;;                                  ("#+STARTUP:" . "")
  ;;                                  ("#+TITLE: " . "")
  ;;                                  ("#+RESULTS:" . "")
  ;;                                  ("#+NAME:" . "")
  ;;                                  ("#+ROAM_TAGS:" . "")
  ;;                                  ("#+FILETAGS:" . "")
  ;;                                  ("#+HTML_HEAD:" . "")
  ;;                                  ("#+SUBTITLE:" . "")
  ;;                                  ("#+AUTHOR:" . "")
  ;;                                  (":Effort:" . "")
  ;;                                  ("SCHEDULED:" . " ")
  ;;                                  ("DEADLINE:" . "")))
  ;;   (prettify-symbols-mode 1))

  ;; (add-hook 'org-mode-hook 'my/org-mode/load-prettify-symbols)
#+end_src
** Prog Symbols
#+begin_src emacs-lisp
  (defun my/prog-mode/load-prettify-symbols ()
    (interactive)
    "Beautify prog mode keywords."
    (setq prettify-symbols-alist '(("lambda" . "λ")
                                   ;;("|>" . "▶")
                                   ;;("<|" . "◁")
                                   ;;("->>" . "↠")
                                   ;;("->" . "➞")
                                   ;;("<-" . "←")
                                   ;;("=>" . "⇒")
                                   ;;("<=" . "≤")
                                   ;;(">=" . "≥")
                                   ))
    (prettify-symbols-mode 1))

  (add-hook 'prog-mode-hook 'my/prog-mode/load-prettify-symbols)
#+end_src
* Notes
** Org Roam
#+begin_src emacs-lisp
  (use-package org-roam
    ;; :defer 2
    :init
    (setq org-roam-v2-ack t)
    (setq org-roam-capture-templates '(("d" "default" plain "%?" :target
                                        (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                                   "#+title: ${title}\n#+date: %u\n#+lastmod: %t\n#+filetags: :emacs:note:roam: \n")
                                        :unnarrowed t)))
    :custom
    (org-roam-directory "~/org/notes/roam")
    ;; (org-roam-completion-everywhere t)
    :bind (("C-c n f" . org-roam-node-find)
           ("C-c n r" . org-roam-node-random)		    
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           ("C-c n a" . org-roam-alias-add)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n l" . org-roam-buffer-toggle)
           ("C-c n o" . org-id-get-create)
           ("C-c n t" . org-roam-tag-add)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode)
    (message "org-roam loaded  ✔"))
#+end_src
** Org Roam UI
#+begin_src emacs-lisp

  (use-package org-roam-ui
    :requires org-roam
    :after org-roam
    :commands (org-roam-ui-mode)
    :init
    (setq org-roam-ui-browser-function #'xwidget-webkit-browse-url)

    :config
    (setq org-roam-ui-sync-theme t
	  org-roam-ui-follow t
	  org-roam-ui-update-on-save t
	  org-roam-ui-open-on-start t)
    (message "org-roam-ui loaded  ✔"))

#+end_src
** Consult-Org-Roam
#+begin_src emacs-lisp
  (use-package consult-org-roam
    :after (consult org-roam)
    :bind
    ("C-c n e" . consult-org-roam-file-find)
    ("C-c n b" . consult-org-roam-backlinks)
    ("C-c n r" . consult-org-roam-search)
    :init
    ;; (require 'consult-org-roam)
    ;; Activate the minor-mode
    (consult-org-roam-mode 1)
    :custom
    (consult-org-roam-grep-func #'consult-ripgrep)
    :config
    ;; Eventually suppress previewing for certain functions
    (consult-customize
     consult-org-roam-forward-links
     :preview-key (kbd "M-."))
    (message "consult-org roam loaded  ✔"))
#+end_src
* Media
** Vuiet  
#+begin_src emacs-lisp
  (use-package  vuiet
    :disabled
    ;; :defer 5
    :requires lastfm
    :config

    (general-define-key
     :keymaps '(vuiet-mode-map)
     :states '(normal)
     "<return>" 'org-open-at-point)

    (setq-local mpv-start-timeout 10)
    (setq vuiet-update-mode-line-automatically t)
    (setq vuiet-update-mode-line-interval 1)
    (message "vuiet loaded  ✔"))
#+end_src
** MPC
#+begin_src emacs-lisp
  (use-package mpc
    :commands (mpc)
    :disabled
    :config
    (message "mpc loaded  ✔"))
#+end_src
** MPV
#+begin_src emacs-lisp
  (use-package mpv
    :commands (mpv-start mpv-play mpv-play-url)
    :config
    (message "mpv loaded  ✔"))
#+end_src
* News Reader & IRC
#+begin_src emacs-lisp
  (use-package newsticker
    :ensure nil
    :commands (newsticker-treeview newsticker-start newsticker-plainview)
    :init
    (setq newsticker-url-list '(("stackoverflow.com - emacs" "https://stackoverflow.com/feeds/tag?tagnames=emacs&sort=newest" nil nil nil)
				("More Productive with Emacs" "https://lucidmanager.org/tags/emacs/index.xml" nil nil nil)
				("Emacs on Reddit" "http://www.reddit.com/r/emacs/.rss" nil nil nil)
				("Prog Memes on Reddit" "http://www.reddit.com/r/ProgrammerHumor/.rss" nil nil nil)

				("Org Upcoming Changes" "https://updates.orgmode.org/feed/changes" nil nil nil)
				("Org Help requests" "https://updates.orgmode.org/feed/help" nil nil nil)
				("Org confirmed Bugs" "https://updates.orgmode.org/feed/bugs" nil nil nil)
				("Org News Update" "https://updates.orgmode.org/feed/updates" nil nil nil)
				("Org This Month" "https://blog.tecosaur.com/tmio/rss.xml" nil nil nil)

				("Framework" "https://blog.tecosaur.com/tmio/rss.xml" nil nil nil)

				("Memes on Reddit" "http://www.reddit.com/r/memes/.rss" nil nil nil)
				("CNN" "http://rss.cnn.com/rss/edition_world.rss" nil nil nil)
				("TheHackerNews" "https://feeds.feedburner.com/TheHackersNews" nil nil nil)))
    :config
    (setq newsticker-retrieval-method #'intern)
    (message "newsticker ready ✔"))
#+end_src

* Games
** Key-quiz
#+begin_src emacs-lisp
  (use-package key-quiz
    :disabled
    ;; :defer 6
    :init
    (evil-set-initial-state 'key-quiz-mode 'insert)
    :config
    (message "speed-type ready ✔"))
#+end_src
** Speed-Type
#+begin_src emacs-lisp
  (use-package speed-type
    :disabled
    ;; :defer 6
    :hook (speed-type-mode . (lambda ()
                               (text-scale-set 1.5)))
    :init
    (evil-set-initial-state 'speed-type-mode 'insert)
    :config
    (message "speed-type ready ✔"))
#+end_src
** Chess
#+begin_src emacs-lisp
  (use-package chess
    :disabled
    ;; :defer 6
    :config
    (message "chess ready ✔"))
#+end_src
* Timer and Watcher
#+begin_src emacs-lisp
  (use-package hammy
    :disabled
    ;; :defer 10
    :config
    (hammy-define (propertize "🍅" 'face '(:foreground "tomato"))
      :documentation "The classic pomodoro timer."
      :intervals
      (list
       (interval :name "Work"
                 :duration "25 minutes"
                 :before (do (announce "Starting work time.")
                             (notify "Starting work time."))
                 :advance (do (announce "Break time!")
                              (notify "Break time!")))
       (interval :name "Break"
                 :duration (do (if (and (not (zerop cycles))
                                        (zerop (mod cycles 3)))
                                   ;; If a multiple of three cycles have
                                   ;; elapsed, the fourth work period was
                                   ;; just completed, so take a longer break.
                                   "30 minutes"
                                 "5 minutes"))
                 :before (do (announce "Starting break time.")
                             (notify "Starting break time."))
                 :advance (do (announce "Break time is over!")
                              (notify "Break time is over!")))))
    (message "hammy ready ✔"))

  (use-package activity-watch-mode
    :disabled
    ;; :defer 10
    ;; :hook (projectile-after-switch-project . (lambda ()
    ;;                                (activity-watch-mode)))
    :config
    (message "activity-watch ready ✔"))
#+end_src
* Utilities
** Emacs Everywhere
#+begin_src emacs-lisp
  (use-package emacs-everywhere
    :commands (emacs-everywhere)
    :config
    (message "emacs-everywhere ready ✔"))
#+end_src

** CRDT
#+begin_src emacs-lisp
  (use-package crdt
    :commands (crdt-list-sessions
	       crdt-list-users
	       crdt-list-buffers
	       crdt-share-buffer
	       crdt-connect)
    :bind (:map crdt-session-menu-mode-map 
		("<return>" . crdt--session-menu-goto)
		("s" . crdt--session-menu-kill)
		:map crdt-user-menu-mode-map
		("g" . crdt--user-menu-goto)
		("k" . crdt--user-menu-kill)
		("f" . crdt--user-menu-follow)
		:map crdt-buffer-menu-mode-map
		("<return>" . crdt--buffer-menu-goto)
		("s" . crdt--buffer-menu-kill))

    :config
    (setq crdt-use-tuntox t)
    (setq crdt-tuntox-executable "/usr/local/bin/tuntox")
    (message "CRDT ready ✔"))
#+end_src
