#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

* Benchmark
#+begin_src emacs-lisp 
  ;; (use-package benchmark-init
  ;;   :ensure nil
  ;;   ;; remove this line when you want to take benchmark at init
  ;;   ;; :commands (benchmark-init/activate benchmark-init/install)
  ;;   :config
  ;;   ;; To disable collection of benchmark data after init is done.
  ;;   (add-hook 'after-init-hook 'benchmark-init/deactivate)
  ;;   (message "benchmark-init loaded ✔"))
#+end_src
* Package management
Initialize the package system
#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("gnu" . "https://elpa.gnu.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/"))
        package-archive-priorities '(("melpa"  . 100)
                                     ("gnu"    .  50)
                                     ("nongnu" .  25)))
  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

Ensure use-package is installed and config
#+begin_src emacs-lisp
  (if (version< emacs-version "29.0")
      ((require 'use-package)
       (unless (package-installed-p 'use-package)
	 (package-install 'use-package))))

  (setq use-package-always-ensure t)

#+end_src
use-package extras
#+begin_src emacs-lisp
  (use-package use-package-ensure-system-package)

  (use-package system-packages
    :config
    (setq system-packages-package-manager 'brew
	  system-packages-use-sudo nil))
#+end_src

* General configuration
** Better defaults
#+begin_src emacs-lisp
  (setq-default
   inhibit-startup-screen t               ; Disable the startup screen
   initial-scratch-message nil            ; Empty the initial *scratch* buffer
   indent-tabs-mode nil                   ; Insert space characters instead of tabs
   tab-width 2                            ; The number of spaces a tab is equal to
   fill-column 78                         ; Line length above which to break a line
   cursor-type 'bar                       ; Display the cursor as a vertical bar
   column-number-mode t                   ; Display the column number in the mode line
   vc-follow-symlinks t                   ; Follow symlinks without requesting confirmation
   major-mode 'text-mode                  ; Set the default major mode to text-mode
   ring-bell-function 'ignore             ; Disable the error beep sound
   cursor-in-non-selected-windows nil     ; Hide the cursor in non-selected windows
   inhibit-compacting-font-caches nil     ; Prevent compacting font caches during garbage collection
   confrim-kill-emacs 'y-or-n-p           ; change all prompts to y or n
   auto-revert-verbose nil                ; Emacs watch file on disk for changes
   global-auto-revert-non-file-buffers t) ; Emacs auto refresh dired buffers

  (savehist-mode t)                       ; Save the minibuffer history
  (global-auto-revert-mode 1)             ; auto-Refresh file
  (show-paren-mode t)                     ; Enable visualization of matching parens
  (save-place-mode t)                     ; Jump to the last known position when reopening a file
  (electric-pair-mode t)                  ; Enable automatic brackets pairing
  (global-hl-line-mode t)                 ; Enable line highlighting in all buffers
  (delete-selection-mode t)               ; Replace selected text when typing
  (global-auto-revert-mode t)             ; Automatically reload externally modified files
  (fset 'yes-or-no-p 'y-or-n-p)           ; Replace "yes/no" prompts with "y/n"
  (prefer-coding-system 'utf-8)           ; Set default encoding to UTF-8
  (set-language-environment 'utf-8)       ; Set default language environment to UTF-8

  ;; (menu-bar-mode 1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode t)
  (set-fringe-mode 10)
  (display-battery-mode t)
  (column-number-mode)
  (put 'scroll-left 'disabled nil)       ; enabled scroll left with C-x 
  (context-menu-mode)                    ; enable context menu
  (repeat-mode)                          ; enable repeat mode 
  (ffap-bindings)                        ; enable thing-at-point binding
#+end_src

File-related customizations.

#+begin_src emacs-lisp
  (use-package files
    :ensure nil
    :custom
    (backup-directory-alist '(("." . "~/.emacs.d/backup-dir")))
    (backup-by-copying t)               ; Always use copying to create backup files
    (delete-old-versions t)             ; Delete excess backup versions
    (kept-new-versions 6)               ; Number of newest versions to keep when a new backup is made
    (kept-old-versions 2)               ; Number of oldest versions to keep when a new backup is made
    (version-control t)                 ; Make numeric backup versions unconditionally
    (auto-save-default nil)             ; Stop creating #autosave# files
    (delete-by-moving-to-trash t)       ; Move deleted files to the trash
    (trash-directory "~/.trash")        ; Set Trash director
    (mode-require-final-newline nil)    ; Don't add newlines at the end of files
    (large-file-warning-threshold nil)  ; Open large files without requesting confirmation

    (recentf-mode 1)                    ; Remeber recently open files
    (save-place-mode 1))                ; Remeber cursor last position
  #+end_src

#+begin_src emacs-lisp
  (use-package emacs
    :bind (("C-S-u" . universal-argument)
           ("<f12>"    . tmm-menubar)
           ("C-x |"    . display-fill-column-indicator-mode)
           ("s-."      . context-menu-open)
           ("s-<up>"   . scroll-other-window)
           ("s-<down>" . scroll-other-window-down))

    :hook (xwidget-webkit-mode . (lambda ()
                                   (goto-address-mode 0 )))

    ;; start emacs-server if not running
    :hook (after-init . (lambda ()
                          (pixel-scroll-precision-mode)
                          (require 'server)
                          (unless (server-running-p)
                            (server-start))))
    :init
    (setq custom-file (concat user-emacs-directory "custom.el"))     ; set customization ui conf-file location
    (setq default-directory "~/tmp/") ; open emacs in tmp folder on startup


    ;; Completion at point
    ;; Enable indentation+completion using the TAB key.
    (setq
     ;; `completion-at-point' is often bound to M-TAB.
     tab-always-indent 'complete
     ;; TAB cycle if there are only few candidates
     completion-cycle-threshold 3)

    (setq inhibit-startup-message t
          show-paren-context-when-offscreen 'overlay)

    ;; Add prompt indicator to `completing-read-multiple'.
    ;; Alternatively try `consult-completing-read-multiple'.
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    (setq goto-address-url-face 'link
          goto-address-url-mouse-face 'highlight
          goto-address-mail-face 'link
          goto-address-mail-mouse-face 'highlight)

    (global-goto-address-mode)

    (setq read-quoted-char-radix 16) ; switch C-q input from default oct

    ;; (set-frame-parameter nil 'fullscreen 'fullboth)
    (setq visible-bell t)

    ;; Tab Bar
    (setq tab-bar-tab-hints t
          tab-bar-close-button-show t)

    (setq tab-line-truncate-flag t
          tab-line-maximum-width 12)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    (setq read-extended-command-predicate
          #'command-completion-default-include-p)

    ;; Case in-sensitivie-search
    (setq read-file-name-completion-ignore-case t
          read-buffer-completion-ignore-case t
          completion-ignore-case t)

    ;; Do not use system clipboard
    ;; (setq x-select-enable-clipboard nil)

    ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

    (setq backup-enable-predicate
          (lambda (name) (and (normal-backup-enable-predicate name)
                              (not (let ((method (file-remote-p name 'method)))
                                     (when (stringp method) (member method '("su" "sudo" "doas"))))))))

    ;; Ediff
    (setq ediff-window-setup-function #'ediff-setup-windows-plain)

    (setq set-mark-command-repeat-pop t)     ; mark ring
    (setq enable-recursive-minibuffers nil)  ; Enable recursive minibuffers
    :if (treesit-available-p) 		           ; check if Emacs is built with tree-sitter library
    :config
    ;; auto-load custom-file when is exist
    (when (file-exists-p custom-file)
      (load custom-file))
    (setq treesit-extra-load-path '("~/.lib/tree-sitter-langs/")))
#+end_src

#+begin_src emacs-lisp
   (setq comint-terminfo-terminal "eterm-256color")

   (defun set-exec-path-from-shell-PATH ()
     "Set up Emacs' `exec-path' and PATH environment variable to match that used by the user's shell.
      This is particularly useful under Mac OS X and macOS, where GUI
      apps are not started from a shell."
     (interactive)
     (let ((path-from-shell (replace-regexp-in-string
                             "[ \t\n]*$" "" (shell-command-to-string
                                             "$SHELL --login -c 'echo $PATH'"))))
       (setenv "PATH" path-from-shell)
       (setq exec-path (split-string path-from-shell path-separator))))

   (set-exec-path-from-shell-PATH)
#+end_src

* Environment
** Dried
#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :bind (("C-x d" . dired)
	   (:map dired-mode-map 
		 ("C-c C-x c" . (lambda ()
				  (interactive)
				  (let ((org-attach-method 'cp))
				    (call-interactively #'org-attach-dired-to-subtree))))))

    :config
    (setq-local truncate-lines t)
    (setq dired-dwim-target t
	  dired-listing-switches "-alh")
    (setq auto-mode-alist (cons '("[^/]\\.dired$" . dired-virtual-mode)
				auto-mode-alist)))

  (use-package dired-rsync-transient
    :commands (dired-rsync)
    :after dired)
#+end_src
** Undo Fu
#+begin_src emacs-lisp 
  (use-package undo-fu
    :config
    (use-package undo-fu-session
    :config
    (setq undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))))
#+end_src
  
** Try
#+begin_src emacs-lisp
  (use-package try
    :disabled
    :config
    (message "try ready ✔"))
#+end_src
** LLM
*** Gptel
#+begin_src emacs-lisp
  (use-package gptel

    :config
    (general-define-key
     :states '(normal visual)
	"g RET" 'gptel-send
	"g -" 'gptel)

    (setq-default gptel-default-mode 'org-mode
		  gptel-post-response-functions #'gptel-end-of-response
		  gptel-model "gemini-pro" ; Pick your default model
		  gptel-backend 
		  (gptel-make-gemini
		   "Gemini"
		   :key (gptel-api-key-from-auth-source "generativelanguage.googleapis.com")
		   :stream t)))
#+end_src
*** Codeium.el
#+begin_src emacs-lisp
  (use-package codeium
    :ensure nil
    ;; if you use straight
    ;; :straight '(:type git :host github :repo "Exafunction/codeium.el")
    ;; otherwise, make sure that the codeium.el file is on load-path

    :init
    (unless (package-installed-p 'codeium.el)
      (package-vc-install "https://github.com/Exafunction/codeium.el.git"))

    ;; codeium-completion-at-point is autoloaded, but you can
    ;; optionally set a timer, which might speed up things as the
    ;; codeium local language server takes ~0.2s to start up
    ;; (add-hook 'emacs-startup-hook
    ;;  (lambda () (run-with-timer 0.1 nil #'codeium-init)))

    ;; :defer t ;; lazy loading, if you want
    :config
    ;; (setq use-dialog-box nil) ;; do not use popup boxes

    ;; if you don't want to use customize to save the api-key
    ;; (setq codeium/metadata/api_key "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")

    ;; get codeium status in the modeline
    (setq codeium-mode-line-enable
	  (lambda (api) (not (memq api '(CancelRequest Heartbeat AcceptCompletion)))))
    (add-to-list 'mode-line-format '(:eval (car-safe codeium-mode-line)) t)
    ;; alternatively for a more extensive mode-line

    (add-to-list 'mode-line-format '(-50 "" codeium-mode-line) t)

    ;; use M-x codeium-diagnose to see apis/fields that would be sent to the local language server
    (setq codeium-api-enabled
	  (lambda (api)
	    (memq api '(GetCompletions Heartbeat CancelRequest GetAuthToken RegisterUser auth-redirect AcceptCompletion))))
    ;; you can also set a config for a single buffer like this:
    ;; (add-hook 'python-mode-hook
    ;;     (lambda ()
    ;;         (setq-local codeium/editor_options/tab_size 4)))

    ;; You can overwrite all the codeium configs!
    ;; for example, we recommend limiting the string sent to codeium for better performance
    (defun my-codeium/document/text ()
      (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (min (+ (point) 1000) (point-max))))
    ;; if you change the text, you should also change the cursor_offset
    ;; warning: this is measured by UTF-8 encoded bytes
    (defun my-codeium/document/cursor_offset ()
      (codeium-utf8-byte-length
       (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (point))))
    (setq codeium/document/text 'my-codeium/document/text)
    (setq codeium/document/cursor_offset 'my-codeium/document/cursor_offset))
#+end_src
* User Interface Improvements
** Toggle Line Number
#+begin_src emacs-lisp
  (defun toggle-line-number()
    (interactive)
    (if (not current-prefix-arg)
	(cond ((eq display-line-numbers-type 't)
	       (menu-bar--display-line-numbers-mode-relative))
	      ((eq display-line-numbers-type 'nil)
	       (menu-bar--display-line-numbers-mode-relative))
	      ((eq display-line-numbers-type 'visual)
	       (menu-bar--display-line-numbers-mode-relative))
	      ((eq display-line-numbers-type 'relative)
	       (menu-bar--display-line-numbers-mode-absolute)))
      (menu-bar--display-line-numbers-mode-none)))
#+end_src
** NerdFont
#+begin_src emacs-lisp
  (use-package nerd-icons)
  (use-package nerd-icons-completion)
#+end_src
** Themes and Mode-line
*** Modus Theme Config
#+begin_src emacs-lisp
  (setq display-time-day-and-date t
        display-time-24hr-format t)

  (display-time)

  ;; Add all your customizations prior to loading the themes
  ;; Configure the Modus Themes' appearance
  (setq modus-themes-fringes 'subtle
        modus-themes-tabs-accented t
        modus-themes-paren-match '(bold intense)
        modus-themes-prompts '(bold intense)
        modus-themes-region '(bg-only)
        modus-themes-completions
        (quote ((matches . (extrabold background intense))
                (selection . (semibold accented intense))
                (popup . (accented))))
        modus-themes-bold-constructs t
        modus-themes-syntax '(green-strings yellow-comments)
        modus-themes-italic-constructs t

        modus-themes-mode-line (quote (borderless accented))

        modus-themes-mixed-fonts t

        modus-themes-scale-headings t
        modus-themes-org-blocks 'tinted-background
        modus-themes-headings
        '((1 . (rainbow overline background 1.4))
          (2 . (rainbow background 1.3))
          (3 . (rainbow bold 1.2))
          (t . (semilight 1.1))))

  (load-theme 'modus-vivendi t)
#+end_src
*** Doom Modeline
#+begin_src emacs-lisp
    (use-package doom-modeline
      :commands (doom-modeline-mode)
      :hook (after-init . doom-modeline-mode)
      :custom    
      (doom-modeline-height 12)
      (doom-modeline-bar-width 1)
      (doom-modeline-icon t)
      (doom-modeline-major-mode-icon t)
      (doom-modeline-major-mode-color-icon t)
      (doom-modeline-buffer-file-name-style 'truncate-upto-project)
      (doom-modeline-buffer-state-icon t)
      (doom-modeline-buffer-modification-icon t)
      (doom-modeline-minor-modes nil)
      (doom-modeline-enable-word-count nil)
      (doom-modeline-buffer-encoding t)
      (doom-modeline-indent-info nil)
      (doom-modeline-checker-simple-format t)
      (doom-modeline-vcs-max-length 12)
      (doom-modeline-env-version t)
      (doom-modeline-irc-stylize 'identity)
      (doom-modeline-github-timer nil)
      (doom-modeline-gnus-timer nil))

    (defun my-doom-modeline--font-height ()
    "Calculate the actual char height of the mode-line."
    (+ (frame-char-height) 0))

  (advice-add #'doom-modeline--font-height :override #'my-doom-modeline--font-height)

#+end_src
** Avy
#+begin_src emacs-lisp
  (use-package avy
    :config
    (general-define-key
     :states '(normal visual)
     "g/" 'evil-avy-goto-char
     "g:" 'evil-avy-goto-line)

    (general-define-key
     :keymaps '(normal insert visual emacs)
     :prefix "C-;"
     "/" 'avy-isearch

     "yl" 'avy-copy-line
     "yr" 'avy-copy-region

     "kl" 'avy-kill-whole-line
     "kr" 'avy-kill-region

     "ml" 'avy-move-line
     "mr" 'avy-move-region)

    (message "avy loaded! ✔"))

#+end_src

** Order-less
#+begin_src emacs-lisp
  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-default nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src

** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :ensure-system-package
    (fd . fd)
    :demand t 
    :general
    (:keymaps 'vertico-map
	      "<tab>" #'vertico-insert        ; Insert selected candidate into text area
	      "<S-tab>" #'vertico-previous  ; Insert selected candidate into text area
	      "C-j" #'vertico-next
	      "C-k" #'vertico-previous
	      "C-f" 'vertico-exit
	      "<escape>" #'abort-minibuffers ; Close minibuffer
	      "C-SPC" #'vertico-quick-exit
	      "C-S-SPC" #'vertico-quick-insert

	      ;; NOTE 2022-02-05: Cycle through candidate groups
	      "C-M-j" #'vertico-next-group
	      "C-M-k" #'vertico-previous-group

	      ;; Toggle Vertico multiforms in active minibuffer
	      "C-l" #'vertico-multiform-grid
	      "M-F" #'vertico-multiform-flat
	      "C-;" #'vertico-multiform-vertical
	      "M-U" #'vertico-multiform-unobtrusive)

    (:keymaps 'minibuffer-local-map
	      "<tab>" #'completion-at-point        ; Insert selected candidate into text area
	      "<escape>" #'abort-minibuffers ; Close minibuffer
	      "C-u"  #'delete-minibuffer-contents
	      "C-w"  #'backward-kill-word)

    :config
    ;; Use 'consult-completion-in-region' if Vertico is enabled.
    ;; Otherwise use the default 'completion--in-region' function.
    (setq completion-in-region-function
	  (lambda (&rest args)
	    (apply (if vertico-mode
		       #'consult-completion-in-region
		     #'completion--in-region)
		   args)))

    (defun kb/vertico-quick-embark (&optional arg)
      "Embark on candidate using quick keys."
      (interactive)
      (when (vertico-quick-jump)
	(embark-act arg)))

    ;;(advice-add #'completing-read-multiple
    ;;            :override #'consult-completing-read-multiple)

    ;; Configure the display per command.
    ;; Use a buffer with indices for imenu
    ;; and a flat (Ido-like) menu for M-x.
    (setq vertico-multiform-commands
	  '((consult-imenu buffer indexed)
	    (consult-grep buffer indexed)
	    (consult-fd buffer indexed)
	    (consult-buffer flat indexed)))
    ;; (execute-extended-command flat indexed)))

    ;; Configure the display per completion category.
    ;; Use the grid display for files and a buffer
    ;; for the consult-grep commands.
    (setq vertico-multiform-categories
	  '((file grid indexed)
	    ;;(t reverse)
	    ))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode)
    ;; Enable vertico-multiform
    (vertico-multiform-mode))
#+end_src
*** Vertico Extension
#+begin_src emacs-lisp
  (use-package vertico-posframe
    ;; :hook (vertico-posframe-mode .
    ;; 			       (lambda () (set-frame-parameter (selected-frame) 'alpha '(85 . 50))))

    :config
    (setq vertico-multiform-commands
	  '((consult-fd posframe indexed
			(vertico-posframe-poshandler . posframe-poshandler-frame-center)
			(vertico-posframe-border-width . 1)
			;; NOTE: This is useful when emacs is used in both in X and
			;; terminal, for posframe do not work well in terminal, so
			;; vertico-buffer-mode will be used as fallback at the
			;; moment.
			(vertico-posframe-fallback-mode . vertico-buffer-mode))
	    (consult-org-roam-search posframe indexed
			  (vertico-posframe-poshandler . posframe-poshandler-frame-center)
			  (vertico-posframe-border-width . 1)
			  ;; NOTE: This is useful when emacs is used in both in X and
			  ;; terminal, for posframe do not work well in terminal, so
			  ;; vertico-buffer-mode will be used as fallback at the
			  ;; moment.
			  (vertico-posframe-fallback-mode . vertico-buffer-mode))
	    (consult-org-roam-file-find posframe indexed
			  (vertico-posframe-poshandler . posframe-poshandler-frame-center)
			  (vertico-posframe-border-width . 1)
			  ;; NOTE: This is useful when emacs is used in both in X and
			  ;; terminal, for posframe do not work well in terminal, so
			  ;; vertico-buffer-mode will be used as fallback at the
			  ;; moment.
			  (vertico-posframe-fallback-mode . vertico-buffer-mode))
	    (consult-grep posframe indexed
			  (vertico-posframe-poshandler . posframe-poshandler-frame-center)
			  (vertico-posframe-border-width . 1)
			  ;; NOTE: This is useful when emacs is used in both in X and
			  ;; terminal, for posframe do not work well in terminal, so
			  ;; vertico-buffer-mode will be used as fallback at the
			  ;; moment.
			  (vertico-posframe-fallback-mode . vertico-buffer-mode))
	    (consult-ripgrep posframe indexed
			     (vertico-posframe-poshandler . posframe-poshandler-frame-center)
			     (vertico-posframe-border-width . 1)
			     ;; NOTE: This is useful when emacs is used in both in X and
			     ;; terminal, for posframe do not work well in terminal, so
			     ;; vertico-buffer-mode will be used as fallback at the
			     ;; moment.
			     (vertico-posframe-fallback-mode . vertico-buffer-mode))
	    )))
#+end_src

** History 
#+begin_src emacs-lisp
  ;; Remeber window layout
  (use-package winner
    :ensure nil
    :init
    (winner-mode)
    :bind
    (("s-<right>" . winner-redo)         
     ("s-<left>" . winner-undo)))

    ;; Emacs remeber input history
    (use-package savehist
      :init
      (savehist-mode)
      :config
      (setq history-length 150))

#+end_src
** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia 
    :after vertico
    :init
    (marginalia-mode))
#+end_src
** IEdit
#+begin_src emacs-lisp
  (global-set-key (kbd "C-*") 'iedit-mode)
  (global-set-key (kbd "M-*") 'iedit-mode-toggle-on-function)
  (use-package iedit
    :bind ((:map iedit-occurrence-keymap-default
                 ("M-u" . iedit-downcase-occurrences)
                 ("M-U" . iedit-upcase-occurrences)
                 ("<tab>" . iedit-next-occurrence)
                 ("<S-tab>" . iedit-prev-occurrence)
                 ("<escape>" . iedit--quit))))
  ;; iedit-goto-last-occurrences
  ;; iedit-goto-first-occurrences
#+end_src
** Tree-Macs
#+begin_src emacs-lisp
  (use-package treemacs
    :commands (treemacs))

  (use-package treemacs-icons-dired
    :after (treemacs dired)
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :config
    (message "treemacs-projectile ready"))

  (use-package treemacs-magit
    :after (treemacs magit)
    :config
    (message "treemacs-magit ready"))
#+end_src
** Key-cast
#+begin_src emacs-lisp
  (use-package keycast
    :commands (keycast-mode keycast-tab-bar)
    :config
    (message "keycast loaded ✔"))
#+end_src
** Cape
#+begin_src emacs-lisp
  (use-package corfu
    :config
    (setq corfu-auto nil
	  corfu-auto-prefix 1
	  corfu-quit-no-match nil
	  corfu-popupinfo-delay 0.3
	  corfu-popupinfo-max-width 70
	  corfu-popupinfo-max-height 20)

    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

  (use-package corfu-candidate-overlay
    :init
    (corfu-popupinfo-mode 1)
    (corfu-candidate-overlay-mode 1))


  (use-package nerd-icons-corfu)


  (use-package cape
    :requires evil
    :config
    ;; Bind dedicated completion commands
    (general-define-key
     :states '(insert)
     :prefix "C-x C-x"			 ; vim i_Ctr-x
     "C-l" 'cape-line
     "C-o" 'completion-at-point          ; vim omni completion 
     "C-k" 'cape-dict
     "C-]" 'complete-tag                 ; etags
     "C-i" 'cape-dabbrev                 ; or dabbrev-completion
     "C-f" 'cape-file
     "C-a" 'cape-abbrev
     "C-s" 'cape-ispell
     "C-&" 'cape-sgml
     "C-e" 'evil-scroll-line-down
     "C-y" 'evil-scroll-line-up)

    :init
    ;; https://karthinks.com/software/it-bears-repeating/
    (defvar evil-insert-state-repeat-map 
      (let ((map (make-sparse-keymap)))
	(define-key map (kbd "C-e") 'evil-scroll-line-down)
	(define-key map (kbd "C-y") 'evil-scroll-line-up)
	map))

    (dolist (cmd '(evil-scroll-line-down evil-scroll-line-up))
      (put cmd 'repeat-map 'evil-insert-state-repeat-map))

    (setq cape-dict-file "/usr/share/dict/words"))
#+end_src
** IBuffer
#+begin_src emacs-lisp
  (use-package ibuffer
    :commands (ibuffer)
    :bind ("C-x C-b" . ibuffer)
    :config
    (message "IBuffer loaded ✔"))
#+end_src
** Link hint
#+begin_src emacs-lisp
  (use-package link-hint
    :commands (link-hint-open-link link-hint-copy-link)
    :config
    (message "link-hint ready ✔"))
#+end_src

* Window Management
** Winum Mode
#+begin_src emacs-lisp
  (use-package winum
    :config 
    (winum-mode)
    (message "winum ready ✔"))
#+end_src
** Ace Windows
#+begin_src emacs-lisp
  (use-package ace-window
    :after evil
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
	 ((t (:inhert ace-jump-face-background :height 1.5))))))
    :config
    (setq aw-dispatch-always t
	  aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))

    (general-define-key
     :states '(normal insert)
     "C-6" 'evil-switch-to-windows-last-buffer)

    (general-define-key
     :keymaps '(evil-window-map)
     "n"  'evil-buffer-new
     "x"  'evil-window-exchange
     "c"  'evil-window-delete
     "t"  'tab-bar-move-window-to-tab
     "C"  'tab-close
     "SPC" 'custom/display-buffer-at-bottom
     "RET" 'evil-window-next
     "a" 'ace-window)
    (message "ace window ready ✔"))

#+end_src
** Visual fill column
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :defer t)

  ;; (lambda () efs/org-mode-visual-fill ()
  ;;       (setq visual-fill-column-width 100
  ;;             visual-fill-column-center-text t)
  ;;       (visual-fill-column-mode 1))
#+end_src
* Terminal
** Term
#+begin_src emacs-lisp
  (defun my-term-handle-exit (&optional process-name msg)
    (message "%s | %s" process-name msg)
    (kill-buffer (current-buffer)))

  (advice-add 'term-handle-exit :after 'my-term-handle-exit)

  (use-package term
    :config
    (setq explicit-shell-file-name "zsh")
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
    (setq mode-line-format nil))

  (use-package eterm-256color
    :after term
    :hook (term-mode . eterm-256color-mode))
#+end_src
** Vterm
#+begin_src emacs-lisp
  (use-package vterm
    :config
    ;; (setq vterm-shell "/usr/local/bin/tmux")
    (setq vterm-max-scrollback 1000)

    (setq display-buffer-alist '(("\\*vterm\\*"
  		                            (display-buffer-in-side-window)
  		                            (window-height . 0.30)
  		                            (side . bottom)
  		                            (slot . -1)
  		                            (window-parameters (mode-line-format . none))))))
#+end_src
* Searches
** Consult
#+begin_src emacs-lisp
  (use-package consult
    :ensure-system-package
    (rg . rg)
    :after vertico 
    :bind (("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c b" . consult-bookmark)
           ("C-c k" . consult-kmacro)

           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ; orig. switch-to-buffer-other-frame

           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)

           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ; orig. yank-pop
           ;; ("<help> a" . consult-apropos)            ; orig. apropos-command

           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ; orig. goto-line
           ("M-g o" . consult-outline)               ; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ("M-g r" . consult-recent-file)

           ;; M-s bindings (search-map)
           ("M-s f" . consult-find)
           ("M-s F" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)

           ;; Isearch integration
           ("M-s e" . consult-isearch-history))
    :config

    ;; Evil Mode Hack for yank-pop
    (defun moon-override-yank-pop (&optional arg)
      "Delete the region before inserting poped string."
      (when (and evil-mode (eq 'visual evil-state))
        (kill-region (region-beginning) (region-end))))

    (setq consult-async-min-input 1) ; Start showing results after the N key press
    (setq-default consult-locate-args "locate -i")
    (advice-add 'consult-yank-pop :before #'moon-override-yank-pop)
    (message "consult ready ✔"))

#+End_src
** Search
configurating emacs build-in isearch package
#+begin_src emacs-lisp
  (use-package isearch
    :ensure nil
    :bind (:map isearch-mode-map
           ("<tab>" . isearch-complete)
           ("C-j" . avy-isearch)
           ("C-e" . iedit-mode-from-isearch)
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)))     ;; orig. isearch-edit-string
#+end_src

* Version Control
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :commands (magit magit-init magit-status)

    :custom (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)

    :init
    (setenv "GIT_EDITOR" "emacs")

    :config
    (setq magit-section-initial-visibility-alist
	  '((untracked . hide)
	    (unstaged . hide)
	    (staged . hide)
	    (unpushed . hide)
	    (unpulled . hide)
	    (modified . hide)))
    (message "Magit ready ✔"))
#+end_src
** Diff-hl
#+begin_src emacs-lisp
    (defun diff-hl-handle-buffer-switch ()
    "Toggle `diff-hl-mode' and `diff-hl-flydiff-mode' based on VC state."
    (interactive)
    (when (buffer-file-name)
      (let ((stage (vc-state (buffer-file-name (current-buffer)))))
	(when stage
	  (diff-hl-mode)
	  (diff-hl-show-hunk-mouse-mode)
	  (diff-hl-flydiff-mode)))))

  (use-package diff-hl
    :hook (buffer-list-update . diff-hl-handle-buffer-switch)
    :bind
    ;; https://www.gnu.org/software/emacs/manual/html_node/use-package/Binding-to-repeat_002dmaps.html
    (:repeat-map diff-hl-command-map 
		 ("n" . diff-hl-show-hunk-next)
		 ("p" . diff-hl-show-hunk-previous) 
		 ("s" . diff-hl-stage-current-hunk)
		 ("r" . diff-hl-revert-hunk)
		 :exit
		 ("c" . magit-commit-create)
		 ("C" . magit-commit)
		 ("b" . magit-blame))
    :config
    (setq
     diff-hl-side "left"
     diff-hl-draw-borders nil
     diff-hl-show-staged-changes nil)
    (message "diff-hl ready ✔"))
    #+end_src
** Forge  
#+begin_src emacs-lisp
  (use-package forge
    :requires ghub
    :after magit
    :init
    (setq ghub-use-workaround-for-emacs-bug nil)
    (setq forge-add-default-bindings nil)
    :config
    (general-define-key
     :keymaps '(forge-post-mode-map
		forge-topic-mode-map
		forge-post-section-map
		forge-issue-section-map
		forge-issues-section-map
		forge-pullreq-section-map
		forge-topic-list-mode-map
		forge-issue-list-mode-map
		forge-pullreqs-section-map
		forge-pullreq-list-mode-map
		forge-forge-repo-section-map
		forge-notifications-mode-map
		forge-topic-state-section-map
		forge-topic-marks-section-map
		forge-topic-title-section-map
		forge-repository-list-mode-map
		forge-topic-labels-section-map
		forge-topic-assignees-section-map
		forge-topic-review-requests-section-map)
     :states '(normal visual)
     "yb" 'forge-copy-url-at-point-as-kill)

    (general-define-key
     :keymaps '(forge-post-mode-map
		forge-topic-mode-map
		forge-post-section-map
		forge-issue-section-map
		forge-issues-section-map
		forge-pullreq-section-map
		forge-topic-list-mode-map
		forge-issue-list-mode-map
		forge-pullreqs-section-map
		forge-pullreq-list-mode-map
		forge-forge-repo-section-map
		forge-notifications-mode-map
		forge-topic-state-section-map
		forge-topic-marks-section-map
		forge-topic-title-section-map
		forge-repository-list-mode-map
		forge-topic-labels-section-map
		forge-topic-assignees-section-map
		forge-topic-review-requests-section-map)
     :states '(normal visual)
     ;; :prefix mpereira/leader
     "go" 'forge-browse-dwim)

    (general-define-key
     :keymaps '(forge-topic-mode-map
		forge-topic-list-mode-map
		forge-topic-state-section-map
		forge-topic-marks-section-map
		forge-topic-title-section-map)
     :states '(normal visual)
     ;; :prefix mpereira/leader
     "go" 'forge-browse-topic)

    (general-define-key
     :keymaps '(forge-post-mode-map
		forge-post-section-map
		forge-topic-list-mode-map
		forge-topic-state-section-map
		forge-topic-marks-section-map
		forge-topic-title-section-map)
     :states '(normal visual)
     ;; :prefix mpereira/leader
     "go" 'forge-browse-post)
    (message "Forge loaded  ✔"))
#+end_src
** Git Time-machine
#+begin_src emacs-lisp
  (use-package git-timemachine
    :after magit
    :commands (git-timemachine-toggle)

    :config
    (general-define-key
     :keymaps '(git-timemachine-mode-map)
     :states '(normal)
     "B" 'git-timemachine-blame
     "b" 'git-timemachine-switch-branch
     "d" 'git-timemachine-show-commit
     "m" 'git-timemachine-show-revision-fuzzy
     "<escape>" 'git-timemachine-quit)
    (message "Git time-machine loaded  ✔"))
#+end_src
** Blamer
#+begin_src emacs-lisp
  (use-package blamer
    :disabled
    :bind (:map evil-normal-state-map
                (";gb" . blamer-mode))
    :custom
    (blamer-idle-time 0.3)
    (blamer-min-offset 70)
    :custom-face
    (blamer-face ((t :foreground "#7a88cf"
                     :background unspecified
                     :height 140
                     :italic t)))
    :config
    (message "Blamer loaded  ✔"))
#+end_src
* Developer Packages
** Project
#+begin_src emacs-lisp
(defun project-vterm ()
  "Start Vterm in the current project's root directory.
If a buffer already exists for running Eshell in the project's root,
switch to it.  Otherwise, create a new Eshell buffer.
With \\[universal-argument] prefix arg, create a new Eshell buffer even
if one already exists."
  (interactive)
  (defvar vterm-buffer-name)
  (let* ((default-directory (project-root (project-current t)))
         (vterm-buffer-name (project-prefixed-buffer-name "vterm"))
         (vterm-buffer (get-buffer vterm-buffer-name)))
    (if (and vterm-buffer (not current-prefix-arg))
        (pop-to-buffer vterm-buffer (bound-and-true-p display-comint-buffer-action))
      (vterm t))))

#+end_src
* Programming
#+begin_src emacs-lisp

  (use-package treesit-auto
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))

  (use-package direnv
    :config
    (direnv-mode)
    (message "direnv loaded ✔"))


  (use-package flycheck
    :commands (flycheck-mode global-flycheck-mode))

  (use-package flycheck-eglot
    :after (flycheck eglot)
    :custom (flycheck-eglot-exclusive nil))

  (use-package hl-todo
    :commands (hl-todo-mode global-hl-todo-mode)
    :config
    (setq hl-todo-keyword-faces
          '(("TODO"   . "#FF0000")
            ("FIXME"  . "#FF0000")
            ("DEBUG"  . "#A020F0")
            ("GOTCHA" . "#FF4500")
            ("STUB"   . "#1E90FF"))))

  (use-package rainbow-mode
    :commands (rainbow-mode)
    :config
    (setq rainbow-x-colors nil)
    (message "rainbow-color loaded ✔"))

  (use-package rainbow-delimiters
    :commands (rainbow-delimiters-mode)
    :config
    (message "rainbow-delimiters loaded ✔"))

  (use-package prog-mode
    :ensure nil
    :bind (:map prog-mode-map
                ("C-/" . comment-dwim ))

    :hook (prog-mode . ( lambda ()
                         ;; (flyspell-prog-mode)
                         ;; (company-mode)	; completion UI
                         (corfu-mode)
                         (hl-todo-mode)
                         (rainbow-mode)
                         (electric-pair-local-mode)
                         (rainbow-delimiters-mode)
                         (display-line-numbers-mode 1)
                         ;; (yas-minor-mode)
                         (flycheck-mode)	
                         (setq-local completion-at-point-functions
                                     (cape-capf-super
                                      ;; #'codeium-completion-at-point
                                      #'tempel-complete
                                      #'cape-keyword ))))
    :config
    (setq-local visual-fill-column-width 100
                visual-fill-column-center-text t)
    (setq-local fill-column 79))
#+end_src
** DevOps
#+begin_src emacs-lisp
(use-package terraform-mode)
(use-package dockerfile-mode)
#+end_src
** Snippet
*** Emmet
#+begin_src emacs-lisp
  (use-package emmet-mode
    :hook
    (sgml-mode . emmet-mode) ;; Auto-start on any markup modes
    (web-mode  . emmet-mode)
    (html-mode . emmet-mode)
    (rjsx-mode . emmet-mode)
    (css-mode  . emmet-mode) ;; enable Emmet's css abbreviation.

    ;; :bind (:map emmet-mode-keymap 
    ;;             ("C-c C-c p" . emmet-preview-mode))

    :init
    (setq
     emmet-indentation 2
     emmet-move-cursor-between-quotes t)

    :config
    (message "emmet loaded  ✔"))   ;; expand with ctrl-enter
#+end_src
*** Tempel
#+begin_src emacs-lisp
  (use-package tempel)
#+end_src

** Web Mode
#+begin_src emacs-lisp
  (use-package web-mode
    ;; :init
    ;; (add-hook 'web-mode-hook 
    ;;           '(lambda ()
    ;;             (set (make-local-variable 'company-backends)
    ;;                  '(company-web-html company-css))))

    :bind (:map web-mode-map
		("C-c v" . browse-url-of-buffer))

    ;; :hook (web-mode-before-auto-complete-hooks
    ;; 	 . (lambda ()
    ;; 	     (let ((web-mode-cur-language
    ;; 		    (web-mode-language-at-pos)))
    ;; 	       (if (string= web-mode-cur-language "php")
    ;; 		   (yas-activate-extra-mode 'php-mode)
    ;; 		 (yas-deactivate-extra-mode 'php-mode))
    ;; 	       (if (string= web-mode-cur-language "css")
    ;; 		   (setq emmet-use-css-transform t)
    ;; 		 (setq emmet-use-css-transform nil)))))

    :mode (("\\.phtml\\'" . web-mode)
	   ("\\.tpl\\.php\\'" . web-mode)
	   ("\\.[agj]sp\\'" . web-mode)
	   ("\\.as[cp]x\\'" . web-mode)
	   ("\\.erb\\'" . web-mode)
	   ("\\.mustache\\'" . web-mode)
	   ("\\.djhtml\\'" . web-mode)
	   ("\\.html?\\'" . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2
	  web-mode-css-indent-offset 2
	  web-mode-code-indent-offset 2
	  web-mode-enable-engine-detection t
	  web-mode-enable-current-column-highlight t
	  web-mode-enable-current-element-highlight t
	  web-mode-engines-alist
	  '(("django" . "focus/.*\\.html\\'")
	    ("ctemplate" . "realtimecrm/.*\\.html\\'"))))

  (use-package markdown-mode
    :ensure-system-package
    (multimarkdown . multimarkdown)

    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
	   ("\\.md\\'" . markdown-mode)
	   ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown")
    :config
    (setq markdown-fontify-code-blocks-natively t))

  (use-package css-mode
    :mode "\\.css\\'")
#+end_src
** JavaScript
#+begin_src emacs-lisp
  (use-package js-mode
    :ensure nil
    :mode "\\.js\\'"
    :config
    (setq js-indent-level 4))

  (use-package typescript-mode
    :config
    (setq typescript-indent-level 2))

  (use-package rjsx-mode
    :mode "\\.js\\'"
    :bind (:map rjsx-mode-map
    ("<" . self-insert-command))
    :config
    (setq js-jsx-indent-level 2))

  (use-package json-mode
    :mode "\\.json\\'"
    :config
    :hook (json-mode .
         (lambda ()
           (make-local-variable 'js-indent-level)
           (setq tab-width 2)
           (setq js-indent-level 2))))

  ;; (require 'dap-firefox)
  ;; (require 'dap-node)
#+end_src
** Eglot
#+begin_src emacs-lisp
      (use-package eglot
        :ensure nil
        :hook ((go-mode . eglot-ensure)
               (web-mode . eglot-ensure)
               (js-mode . eglot-ensure)
               (python-mode . eglot-ensure)
               (typescript-mode . eglot-ensure)
               (rjsx-mode . eglot-ensure)
               (sql-mode . eglot-ensure)
               (html-mode . eglot-ensure)
               ((c-mode-hook c-ts-mode-hook c++-mode-hook c++-ts-mode-hook) . eglot-ensure)
               (eglot-managed-mode . (lambda ()
                                       (flycheck-eglot-mode)
                                       (remove-hook 'flymake-diagnostic-functions 'eglot-flymake-backend))))
        :general
        (:keymaps 'eglot-mode-map
                  "C-c ." #'eglot-code-actions
                  "C-c r" #'eglot-rename
                  "C-c h" #'eldoc
                  "C-c f" #'eglot-format
                  "C-c F" #'eglot-format-buffer)

        :config
        (add-to-list 'eglot-server-programs '(sql-mode . ("sqls")))
        (message "eglot loaded"))

      ;;   To use the bundled libc++ please add the following LDFLAGS:
      ;;   LDFLAGS="-L/opt/homebrew/opt/llvm/lib/c++ -Wl,-rpath,/opt/homebrew/opt/llvm/lib/c++"

      ;; llvm is keg-only, which means it was not symlinked into /opt/homebrew,
      ;; because macOS already provides this software and installing another version in
      ;; parallel can cause all kinds of trouble.

      ;; If you need to have llvm first in your PATH, run:
      ;;   echo 'export PATH="/opt/homebrew/opt/llvm/bin:$PATH"' >> ~/.zshrc

      ;; For compilers to find llvm you may need to set:
      ;;   export LDFLAGS="-L/opt/homebrew/opt/llvm/lib"
      ;;   export CPPFLAGS="-I/opt/homebrew/opt/llvm/include"

      (use-package consult-eglot
        :after eglot
        :config
        (message "consult-eglot loaded ✔"))

      ;; '((web-mode) . ("vscode-html-language-server" "--node-ipc"))
      ;; '((R-mode) . ("R" "--slave" "-e" "languageserver::run()")))
#+end_src
** Python
#+begin_src emacs-lisp
  (use-package python
    :bind (:map python-mode-map
                ("C-c TAB ." . python-import-symbol-at-point))
    :config
    (setq-local pyvenv-mode 1)

    (when (executable-find "ipython")
      (setq python-shell-interpreter "ipython"
            python-shell-interpreter-args "-i --simple-prompt --InteractiveShell.display_page=True"))

    (setq python-indent-guess-indent-offset nil
          python-indent-offset 4
          python-shell-completion-native-enable nil))

  (use-package live-py-mode
    :commands (live-py-mode)
    :requires python
    :config
    (setq live-py-version "python")
    (message "live py ready ✔"))
#+end_src
*** Virtual Envs
#+begin_src emacs-lisp
  (use-package conda
    :commands (conda-env-activate-for-buffer conda-env-list conda-env-activate)
    :init
    ;; (unless (getenv "CONDA_DEFAULT_ENV")
    ;;   (conda-env-activate "base"))
    ;; (progn
    ;; (conda-env-initialize-interactive-shells)
    ;; (conda-env-initialize-eshell))

    :config
    (progn
      ;; (conda-env-initialize-interactive-shells)
      ;; (conda-env-initialize-eshell)
      (setq conda--executable-path "/Users/rwilson/opt/anaconda3/condabin/conda"
      conda-env-home-directory (expand-file-name "~/opt/anaconda3/"))
      (custom-set-variables '(conda-anaconda-home (expand-file-name "~/opt/anaconda3/"))))
    ;;(conda-env-autoactivate-mode nil)
    (message "conda loaded  ✔"))

  (defun org-babel-execute:jupyter-advice (function &rest args)
    (unless (getenv "CONDA_DEFAULT_ENV")
      (conda-env-activate))
    (apply function args))

  (advice-add 'org-babel-execute:jupyter-python :around #'org-babel-execute:jupyter-advice)


  (use-package pyvenv 
    :requires pipenv
    :commands (pyvenv-mode)
    :config
    (message "pyvenv loaded  ✔"))

  (use-package poetry
    :ensure-system-package
    (pipx . pipx)
    :config
    (poetry-tracking-mode)
    (message "poetry ready ✔"))
#+end_src
** PlantUML
#+begin_src emacs-lisp
  (use-package plantuml-mode
    :mode (("\\.pu\\'" . plantuml-mode)
           ("\\.uml\\'" . plantuml-mode)
           ("\\.puml\\'" . plantuml-mode))
    :config
    ;; (setq org-plantuml-jar-path (expand-file-name "/usr/local/Cellar/plantuml/1.2022.5/libexec/plantuml.jar"))
    ;; Sample executable configuration

    ;; manage window layout
    (setq display-buffer-alist '(("\\*plantuml preview\\*"
                                  (display-buffer-reuse-window display-buffer-in-side-window)
                                  (side . right)
                                  (slot . -1)
                                  (window-width . 0.5))))

    (setq
     org-plantuml-exec-mode 'plantuml
     org-plantuml-executable-path "/usr/local/bin/plantuml")

    (setq
     plantuml-executable-path "/usr/local/bin/plantuml"
     plantuml-default-exec-mode 'executable
     plantuml-indent-level 2
     plantuml-output-type "png"))
#+end_src
** SQL  
#+begin_src emacs-lisp 
  (use-package sql
    :ensure nil
    :hook (sql-interactive-mode .
                                (lambda ()
                                  (toggle-truncate-lines t)))
    :config
    (setq sql-sqlite-options '("-table")
          sql-mysql-options '("--protocol=tcp"))

    ;; Define MySQL login parameters
    (setq sql-mysql-login-params
          '((user :default "root")
            (password :default "root")
            (server :default "127.0.0.1")  ;; Use 127.0.0.1 or your server's IP address
            (database :default "mysql")
            (port :default 3306)))

    (setq sql-connection-alist
          '((pgsql-prod (sql-product 'postgres)
                        (sql-port 5432)
                        (sql-server "localhost")
                        (sql-user "postgres")
                        (sql-password "root")
                        (sql-database ""))
            (pgsql-staging (sql-product 'postgres)
                           (sql-port 5432)
                           (sql-server "db.staging.com")
                           (sql-user "user")
                           (sql-password "password")
                           (sql-database "my-app"))
            (mysql-dev (sql-product 'mysql)
                       (sql-port 3306)
                       (sql-server "127.0.0.1")
                       (sql-user "root")
                       (sql-password "password")
                       (sql-mysql-options '("--protocol=tcp"))
                       (sql-database "")))))
#+end_src
** Rest Client
#+begin_src emacs-lisp
    (use-package restclient
      :commands (restclient-mode)
      :mode ("\\.http\\'"  . restclient-mode)
	      
      ;; :hook (restclient-mode . company-mode)
      :bind (:map restclient-mode-map
		  ("C-c C-f" . json-mode-beautify))
      :config
      (message "restclient loaded ✔"))
#+end_src
** Yaml
#+begin_src emacs-lisp
(use-package yaml-mode 
:mode (("\\.yaml\\'" . yaml-mode)
	("\\.yml\\'" . yaml-mode))
:bind ((:map yaml-mode-map
		("\C-m" . 'newline-and-indent)))
:config
(message "yaml loaded"))
#+end_src
** Graphql
#+begin_src emacs-lisp
  (use-package graphql-mode
  :commands (graphql-mode)
  :config
  (message "graphql loaded"))
#+end_src
** Devdocs
#+begin_src emacs-lisp
  (use-package devdocs
    :commands (devdocs-search devdocs-lookup)
    :hook (devdocs-mode . (lambda ()
  		                      (toggle-truncate-lines nil) 
  		                      (visual-line-mode t))))
#+end_src
* Data Science
** Jupyter
#+begin_src emacs-lisp
  (use-package jupyter
    ;; :requires (zmq org python)
    :commands (jupyter-run-server-repl
               jupyter-run-repl
               jupyter-server-list-kernels)
    :init (eval-after-load 'jupyter-org-extensions ; conflicts with my helm config, I use <f2 #>
            '(unbind-key "C-c h" jupyter-org-interaction-mode-map))
    :config
    (message "jupyter ready ✔"))
#+end_src
** ESS
#+begin_src emacs-lisp
  (use-package ess
    ;; :hook (R-mode . eglot-ensure)
    :commands (ess-mode)
    :custom
    (inferior-ess-fix-misaligned-output t)
    (ess-eldoc-show-on-symbol t)
    (ess-gen-proc-buffer-name-function 'ess-gen-proc-buffer-name:projectile-or-directory)
    (ess-eval-visibly nil); "Don't hog Emacs"
    (ess-style 'RStudio)
    (ess-use-flymake nil) ;"Syntax checking is usually not helpful"
    ;; (ess-tab-complete-in-script nil) ;"Do not interfere with Company"
    ;; (ess-use-ido nil) ;"Prefer Ivy/Counsel"
    ;; (ess-history-directory (expand-file-name "ESS-history/" no-littering-var-directory))
    (inferior-R-args "--no-save")
    (ess-ask-for-ess-directory nil)
    ;; (ess-smart-S-assign-key nil)
    ;; (ess-indent-with-fancy-comments nil)
    :config
    (setq ess-use-company t)
    (setq ess-can-eval-in-background nil)

    (setq ess--command-default-timeout 1)

    (message "ESS loaded ✔"))

  (use-package ess-view-data
    :after (ess)
    :config
    (message "ESS View loaded ✔"))
#+end_src
** Gnuplot
#+begin_src emacs-lisp
  (use-package gnuplot
  :after (org gnuplot)
  :config
  (message "gnuplot loaded"))

  (use-package gnuplot-mode
  :commands (gnuplot-mode)
  :mode ("\\.gplot\\'" . gnuplot-mode)
  :config
  (message "gnuplot mode loaded"))
#+end_src
* Writing
** Grammar 
#+begin_src emacs-lisp
  (add-to-list 'ispell-skip-region-alist '("#\\+begin_src" . "#\\+end_src"))

  ;; (setq-local whitespace-line-column 80)
  ;; (whitespace-mode)

  ;; (setq-local fill-column 80)
  ;; (display-fill-column-indicator-mode 1)

  (use-package flyspell-lazy
    :after flyspell

    ;; :bind ((:map flyspell-mode-map
    ;;              ("C-;" . nil)))

    :config
    (setq flyspell-lazy-idle-seconds 2))
#+end_src
** Dictionary & Thesaurus 
#+begin_src emacs-lisp
  (use-package dictionary
    :commands (dictionary)
    :config
    (message "dictionary loaded ✔"))
#+end_src
** Latex
#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex

    :defer

    :bind ((:map TeX-mode-map
		 ("<tab>" . TeX-complete-symbol)))

    :hook (TeX-mode . ( lambda ()
			;; (company-mode)
			(corfu-mode)
			(hl-todo-mode)
			(display-line-numbers-mode 1)))
    :config
    ;; Turn on RefTeX in AUCTeX
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    ;; Activate nice interface between RefTeX and AUCTeX
    (setq reftex-plug-into-AUCTeX t)

    ;; Enable document pasing 
    (setq TeX-auto-save t) 
    (setq TeX-parse-self t)

    ;; make AUCTeX aware of the multifile document structure.
    (setq-default TeX-master nil)

    (setq-local visual-fill-column-center-text t
		fill-column 80)

    (message "AUCTeX ready ✔"))

  ;; (use-package latex-preview-pane
  ;;   :after tex
  ;;   :config
  ;;   (setq latex-preview-pane-use-frame nil)
  ;;   (setq message-latex-preview-pane-welcome nil)
  ;;   (latex-preview-pane-enable))

#+end_src
** Bibtex
#+begin_src emacs-lisp
  ;; https://kristofferbalintona.me/posts/202206141852/
  (use-package citar
    :after org
    :custom-face
    ;; Have citation link faces look closer to as they were for `org-ref'
    ;; (org-cite ((t (:foreground "DarkSeaGreen4"))))
    ;; (org-cite-key ((t (:slant italic))))

    :bind(:map org-mode-map
	       :package org ("C-c b" . #'org-cite-insert))



    ;; optional: org-cite-insert is also bound to C-c C-x C-@
    :config
    (setq org-cite-global-bibliography'("~/Documents/bib/emacs-bibs/references.bib"
					"~/Documents/bib/emacs-bibs/dei.bib"
					"~/Documents/bib/emacs-bibs/master.bib"
					"~/Documents/bib/emacs-bibs/archive.bib")
	  org-cite-insert-processor 'citar
	  org-cite-follow-processor 'citar
	  org-cite-activate-processor 'citar
	  citar-bibliography org-cite-global-bibliography)

    (setq citar-notes-paths '("~/Documents/bib/bibtex-notes/")
	  citar-library-paths '("~/Documents/bib/bibtex-pdfs/"))

    (setq bibtex-autokey-year-length 4
	  bibtex-autokey-name-year-separator "-"
	  bibtex-autokey-year-title-separator "-"
	  bibtex-autokey-titleword-separator "-"
	  bibtex-autokey-titlewords 2
	  bibtex-autokey-titlewords-stretch 1
	  bibtex-autokey-titleword-length 5
	  bibtex-dialect 'biblatex)

    (setq bibtex-completion-bibliography '("~/Documents/bib/emacs-bibs/references.bib"
					   "~/Documents/bib/emacs-bibs/dei.bib"
					   "~/Documents/bib/emacs-bibs/master.bib"
					   "~/Documents/bib/emacs-bibs/archive.bib")
	  bibtex-completion-library-path '("~/Documents/bib/bibtex-pdfs/")
	  bibtex-completion-notes-path "~/Documents/bib/bibtex-notes/"
	  bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"

	  bibtex-completion-additional-search-fields '(keywords)
	  bibtex-completion-display-formats
	  '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
	    (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
	    (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	    (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	    (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
	  bibtex-completion-pdf-open-function
	  (lambda (fpath)
	    (call-process "open" nil 0 nil fpath))))

  (use-package org-roam-bibtex ; optional: if using Org-ref v2 or v3 citation links
    :after org-roam)
  ;; :config
  ;; (require 'org-ref)

  ; (use-package org-ref
  ;;   :bind (:map bibtex-mode-map
  ;;               ("H-b" . org-ref-bibtex-hydra/body)
  ;;               (:map biblio-selection-mode-map
  ;;                     ("k" . biblio--selection-previous)
  ;;                     ("j" . biblio--selection-next)))
  ;;   :config
  ;;   (setq org-ref-bibtex-hydra-key-binding (kbd "H-b")))
#+end_src
** PDF Tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    ;; Use brew upgrade pdf-tools instead.
    (custom-set-variables '(pdf-tools-handle-upgrades nil)) 

    (use-package saveplace-pdf-view)            ; add save-place compatibalit

    (add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode)
    (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
    (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
    (setq TeX-source-correlate-method 'synctex
          TeX-source-correlate-start-server t
          pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")
    :init
    (pdf-loader-install))

#+end_src
** Zotero
#+begin_src emacs-lisp
(use-package zotero
  :disabled
  :commands (zotero-browser))
#+end_src
* Email
** Mu4e Function
#+begin_src emacs-lisp
  (defun diary-from-outlook-mu4e (&optional noconfirm)
    "Maybe snarf diary entry from Outlook-generated message in Gnus.
  Unless the optional argument NOCONFIRM is non-nil (which is the case when
  this function is called interactively), then if an entry is found the
  user is asked to confirm its addition.
  Add this function to `gnus-article-prepare-hook' to notice appointments
  automatically."
    (interactive "p")
    (with-current-buffer gnus-article-buffer
      (let ((subject (gnus-fetch-field "subject"))
	    (body (if gnus-article-mime-handles
		      ;; We're multipart.  Don't get confused by part
		      ;; buttons &c.  Assume info is in first part.
		      (mm-get-part (nth 1 gnus-article-mime-handles))
		    (save-restriction
		      (gnus-narrow-to-body)
		      (buffer-string)))))
	(when (diary-from-outlook-internal subject body t)
	  (when (or noconfirm (y-or-n-p "Snarf diary entry? "))
	    (diary-from-outlook-internal subject body)
	    (message "Diary entry added"))))))

  (defun do.mail.html/render-pdf (msg)
    "Attempt to render body of MSG as PDF and display in current buffer."
    (let ((msg2pdf (executable-find "wkhtmltopdf"))
	  (buf (get-buffer-create "*rendered mail*"))
	  (tmpfile (make-temp-file "pdfmailrender")))
      (unless msg2pdf
	(mu4e-error "wkhtmltopdf not found"))
      (unless (mu4e-message-has-field msg :body-html)
	(mu4e-error "message has no html."))
      ;; convert message body to PDF
      (with-temp-buffer
	(insert (mu4e-message-field msg :body-html))
	(shell-command-on-region
	 (point-min) (point-max)
	 (concat msg2pdf " -s Letter --quiet - "
		 tmpfile
		 " 2>/dev/null") nil nil nil nil nil))
      ;; display in current window
      (switch-to-buffer buf)
      (read-only-mode -1)
      (erase-buffer)
      (insert-file-contents tmpfile)
      (doc-view-mode)
      (delete-file tmpfile)))

  (defun efs/store-link-to-mu4e-query ()
    (interactive)
    (let ((org-mu4e-link-query-in-headers-mode t))
      (call-interactively 'org-store-link)))

  (defun mu4e-action-save-to-pdf (msg)
    (let* ((date (mu4e-message-field msg :date))
	   (infile (mu4e-write-body-to-html msg))
	   (dir (read-directory-name "Directory:"))
	   (outfile (format-time-string "%Y-%m-%d%H%M%S.pdf" date)))
      (with-temp-buffer
	(shell-command
	 (format "wkhtmltopdf %s %s%s" infile dir outfile) t))
      (message "output file %s" outfile)))

  (defun efs/capture-mail-follow-up (msg)
    (interactive)
    (call-interactively 'org-store-link)
    (org-capture nil "ef"))

  (defun efs/capture-mail-read-later (msg)
    (interactive)
    (call-interactively 'org-store-link)
    (org-capture nil "er"))

  ;; add option to view as pdf.
  ;; (add-to-list 'mu4e-view-actions '("Save to PDF" . mu4e-action-save-to-pdf) t)
#+end_src
** Mu4e Context
#+begin_src emacs-lisp
  ;; (add-hook 'mail-citation-hook 'sc-cite-original)
  (use-package mu4e
    :ensure nil
    :defer 3
    :commands (mu4e)
    :load-path "/usr/local/share/emacs/site-lisp/mu/mu4e"

    :hook (mu4e-view-mode lambda ()
			  (mu4e-icalendar-setup)
			  (gnus-icalendar-org-setup))
    :config
    (setq mail-source-directory "~/Library/Mail/")
    (setq mu4e-get-mail-command "mbsync -a"
	  mu4e-change-filenames-when-moving t
	  mu4e-compose-format-flowed t
	  message-kill-buffer-on-exit t
	  ;; Refresh mail using isync every 10 minutes
	  mu4e-update-interval (* 10 60)
	  shr-color-visible-luminance-min 80
	  mu4e-context-policy 'pick-first
	  read-mail-command 'mu4e)

    (setq mu4e-text2speech-command "espeak")

    (require 'mu4e-icalendar)
    (setq mu4e-icalendar-diary-file "~/.emacs.d/diary"
	  gnus-icalendar-org-capture-file "~/org/beorg/org/Mails.org"
	  ;;make sure to create Calendar heading first
	  gnus-icalendar-org-capture-headline '("Calendar"))

    (setq mu4e-use-fancy-chars t
	  mu4e-headers-unread-mark    '("u" . "📩 ")
	  mu4e-headers-draft-mark     '("D" . "🚧 ")
	  mu4e-headers-flagged-mark   '("F" . "🚩 ")
	  mu4e-headers-new-mark       '("N" . "📨 ")
	  mu4e-headers-passed-mark    '("P" . "↪ ")
	  mu4e-headers-replied-mark   '("R" . "↩ ")
	  mu4e-headers-seen-mark      '("S" . " ")
	  mu4e-headers-trashed-mark   '("T" . "🗑️")
	  mu4e-headers-attach-mark    '("a" . "📎 ")
	  mu4e-headers-encrypted-mark '("x" . "🔑 ")
	  mu4e-headers-signed-mark    '("s" . ""))

    (setq mu4e-completing-read-function 'completing-read)

    (add-to-list 'mu4e-view-actions
		 '("Save to PDF" . do.mail.html/render-pdf) t)

    ;; Add custom actions for our capture templates
    (add-to-list 'mu4e-headers-actions
		 '("follow up" . efs/capture-mail-follow-up) t)

    (add-to-list 'mu4e-headers-actions
		 '("read later" . efs/capture-mail-read-later) t)

    (add-to-list 'mu4e-view-actions
		 '("follow up" . efs/capture-mail-follow-up) t)

    (add-to-list 'mu4e-view-actions
		 '("read later" . efs/capture-mail-read-later) t)

    ;; Wrap text in messages
    (add-hook 'mu4e-view-mode-hook
	      (lambda () (setq-local truncate-lines nil)))

    (add-hook 'mu4e-compose-mode-hook
	      (lambda ()
		(turn-off-auto-fill)
		(use-hard-newlines -1)))

    (setq mu4e-bookmarks
	  '(("date:today" "Today" ?t)
	    ("flag:unread"  "Unread" ?u)
	    ("flag:unread to:ramus@rjlwjr.com OR ramus_wilson@icloud.com" "Icloud Unread" ?i)
	    ("flag:unread to:ramuswilson@gmail.com" "Gmail Unread" ?g)
	    ("flag:unread to:ramuswilson@outlook.com" "Outlook Unread" ?o)
	    ("prio:high" "High priority" ?h)
	    ("flag:attach" "Attachment" ?a)
	    ("flag:trashed" "Trashed" ?x)))

    ;; set mailbox context
    (setq mu4e-contexts
	  (list
	   ;; Personal Gmail account
	   (make-mu4e-context
	    :name "Gmail"
	    :match-func
	    (lambda (msg)
	      (when msg
		(string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
	    :vars '((user-mail-address . "ramuswilson@gmail.com")

		    (smtpmail-smtp-server  . "smtp.gmail.com")
		    (smtpmail-smtp-service . 587)
		    (smtpmail-stream-type  . starttls)

		    (mu4e-drafts-folder  . "/Gmail/[Gmail]/Drafts")
		    (mu4e-sent-folder  . "/Gmail/[Gmail]/Sent Mail")
		    (mu4e-refile-folder  . "/Gmail/[Gmail]/All Mail")
		    (mu4e-trash-folder  . "/Gmail/[Gmail]/Trash")

		    ;; (mu4e-maildir-shortcuts . (("/Gmail/Inbox"            . ?i)
		    ;;                            ("/Gmail/[Gmail]/Sent Mail" . ?s)
		    ;;                            ("/Gmail/[Gmail]/Trash"     . ?t)
		    ;;                            ("/Gmail/[Gmail]/Drafts"    . ?d)
		    ;;                            ("/Gmail/[Gmail]/All Mail"  . ?a)))
		    ))

	   ;; Personl Outlook account
	   (make-mu4e-context
	    :name "Outlook"
	    :match-func
	    (lambda (msg)
	      (when msg
		(string-prefix-p "/Outlook" (mu4e-message-field msg :maildir))))
	    :vars '((user-mail-address . "ramuswilson@outlook.com")

		    (smtpmail-smtp-server  . "smtp.office365.com")
		    (smtpmail-smtp-service . 587)
		    (smtpmail-stream-type  . starttls)

		    (mu4e-drafts-folder  . "/Outlook/Drafts")
		    (mu4e-sent-folder  . "/Outlook/Sent")
		    (mu4e-refile-folder  . "/Outlook/Inbox")
		    (mu4e-trash-folder  . "/Outlook/Archive")

		    ;; (mu4e-maildir-shortcuts . (("/Outlook/Inbox"           . ?i)
		    ;;                            ("/Outlook/Sent"            . ?s)
		    ;;                            ("/Outlook/Archive"         . ?t)
		    ;;                            ("/Outlook/Drafts"          . ?d)
		    ;;                            ("/Outlook"                 . ?a)))
		    ))


	   (make-mu4e-context
	    :name "Icloud"
	    :match-func
	    (lambda (msg)
	      (when msg
		(string-prefix-p "/Icloud" (mu4e-message-field msg :maildir))))
	    :vars '((user-mail-address . "ramus@rjlwjr.com")
		    (mu4e-drafts-folder  . "/Icloud/Drafts")
		    (mu4e-sent-folder  . "/Icloud/Sent Messages")
		    (mu4e-refile-folder  . "/Icloud/Inbox")
		    (mu4e-trash-folder  . "/Icloud/Archive")

		    (smtpmail-smtp-server  . "smtp.mail.me.com")
		    (smtpmail-smtp-service . 587)
		    (smtpmail-stream-type  . starttls)

		    ;; (mu4e-maildir-shortcuts . (("/Icloud/Inbox"           . ?i)
		    ;;                            ("/Icloud/Sent Messages"   . ?s)
		    ;;                            ("/Icloud/Archive"         . ?t)
		    ;;                            ("/Icloud/Drafts"          . ?d)
		    ;;                            ("/Icloud"                 . ?a)))
		    ))))

    (message "mu4e loaded  ✔"))
#+end_src

** GNUS function
#+begin_src emacs-lisp
  (require 'gnus-dired)
  ;; make the `gnus-dired-mail-buffers' function also work on
  ;; message-mode derived modes, such as mu4e-compose-mode
  (defun gnus-dired-mail-buffers ()
    "Return a list of active message buffers."
    (let (buffers)
      (save-current-buffer
        (dolist (buffer (buffer-list t))
          (set-buffer buffer)
          (when (and (derived-mode-p 'message-mode)
                     (null message-sent-message-via))
            (push (buffer-name buffer) buffers))))
      (nreverse buffers)))

  (setq gnus-dired-mail-mode 'mu4e-user-agent)
  (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
#+end_src
** Epg Configuration
#+begin_src emacs-lisp
  ;; (require 'epg-config)
  ;; (setq mml2015-use 'epg
  ;;       epg-user-id "66F8C595B114BDB92A14C0CA0008C56CA8D4A32E"
  ;;       mml2015-encrypt-to-self t
  ;;       mml2015-sign-with-sender t)
#+end_src
** Org MSG
#+begin_src emacs-lisp
  (use-package org-msg
    :defer 3
    :config
    (setq-local fill-column 80) ; email


    (setq org-msg-options "tex:dvisvgm html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
	  org-msg-startup "hidestars indent inlineimages"
	  org-msg-greeting-name-limit 3
	  org-msg-default-alternatives '((new		. (text html))
					 (reply-to-html	. (text html))
					 (reply-to-text	. (text)))
	  org-msg-convert-citation t
	  org-msg-greeting-fmt "\nHi%s,\n\n"
	  org-msg-signature "
  Regards,

  ,#+begin_signature
  ---------------------------
  ,*Ramus Jabee Lloyd Wilson*
  ICT Consultant | Smile Technology LLC
  /email: ramus@rjlwjr.com/
  /work-email: ramus.wilson@smiletech.com/
  /mobile phone: +231-77-797-8125 +231-88-697-8125/
  /The simple act of paying attention can take you a long way/
  send from Gnus Emacs mu4e client
  ,#+end_signature")
    (org-msg-mode)
    (message "org-msg ready ✔"))
#+end_src
** Email Global Variables
#+begin_src emacs-lisp
  (setq user-full-name               "Ramus Jabee Lloyd Wilson"
	user-mail-address            "ramus@rjlwjr.com"
	send-mail-function		'smtpmail-send-it

	message-send-mail-function	'smtpmail-send-it
	message-default-mail-headers "Cc: \nBcc: \n"

	smtpmail-smtp-server         "smtp.mail.me.com"
	smtpmail-smtp-service        587
	smtpmail-stream-type         'starttls

	mail-user-agent 'mu4e-user-agent)

  (add-hook 'message-setup-hook ( lambda ()
				  (auto-fill-mode)
				  (flyspell-mode)))
#+end_src
* Org Mode
** Custom function
#+begin_src emacs-lisp

  ;; Org Mode Configuration ------------------------------------------------------
  (defun efs/org-mode-setup ()
    (org-modern-mode 1)
    (org-indent-mode -1)
    ;; (visual-line-mode 1)
    (visual-fill-column-mode 1)
    ;; (hl-todo-mode)
    (setq-local truncate-lines t)
    (setq-local truncate-lines t)

    (setq org-hide-leading-stars t)

    (setq-local fill-column 80)
    (auto-fill-mode)

    (setq-local visual-fill-column-width 100
		visual-fill-column-center-text t)

    (variable-pitch-mode 1))

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    ;; (font-lock-add-keywords 'org-mode
    ;; 			  '(("^ *\\([-]\\) "
    ;; 			     (0 (prog1 ()
    ;; 				  (compose-region (match-beginning 1) (match-end 1) "➣"))))))

    ;; Set faces for heading levels
     (dolist (face '((org-level-1 . 1.2)
		  (org-level-2 . 1.1)
		  (org-level-3 . 1.05)
		  (org-level-4 . 1.0)
		  (org-level-5 . 1.1)
		  (org-level-6 . 1.1)
		  (org-level-7 . 1.1)
		  (org-level-8 . 1.1)))
       (set-face-attribute (car face) nil :font "ETBembo" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src
* Org
#+begin_src emacs-lisp
    (use-package org

      :hook ((org-mode . ( lambda ()
			   (efs/org-mode-setup)))
	     (outline-mode . org-modern-mode))


      :bind (("C-c l" . org-store-link)
	     ("C-c c" . org-capture) 
	     :map org-mode-map
	     ("C-/" . org-comment-dwim )
	     ("S-<backspace>" . org-table-blank-field))

      :config
      (setq org-display-remote-inline-images 'cache) ; org-version 9.5 not working
      (setq org-use-property-inheritance t)
      (setq org-directory (concat (getenv "HOME") "/org"))
      (setq org-ellipsis " ⤸")
      (setq org-log-done '(time note))
      (setq org-startup-folded t)
      (setq org-log-into-drawer t)
      (setq org-startup-indented nil)
      (setq org-hide-emphasis-markers t)

      (setq my/org-latex-scale 2)
      (setq org-preview-latex-default-process 'dvisvgm)
      (setq org-format-latex-options (plist-put org-format-latex-options
						:scale my/org-latex-scale))

      (setq org-cite-csl-styles-dir "~/Zotero/styles")

      (setq org-todo-keywords
	    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
	      (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

      (setq org-refile-targets
	    '((nil :maxlevel . 4)
	      ("Archive.org" :maxlevel . 1)
	      ("Tasks.org" :maxlevel . 1))
	    org-refile-use-outline-path 'title)

      ;; Save Org buffers after refiling!
      (advice-add 'org-refile :after 'org-save-all-org-buffers)

      (setq org-tag-alist
	    '((:startgroup)
	      ;; Put mutually exclusive tags here
	      (:endgroup)
	      ("note" . ?n)
	      ("@home" . ?H)
	      ("@work" . ?W)
	      ("batch" . ?b)
	      ("agenda" . ?a)
	      ("publish" . ?P)
	      ("@errand" . ?E)
	      ("planning" . ?p)
	      ("idea" . ?i)))


      (setq org-capture-templates
	    '(("t" "Tasks / Projects")
	      ("tt" "Task" entry (file+olp "~/org/beorg/org/Tasks.org" "Inbox")
	       "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

	      ("j" "Journal Entries")
	      ("jj" "Journal" entry
	       (file+olp+datetree "~/org/beorg/org/Journal.org")
	       "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
	       ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
	       :clock-in :clock-resume
	       :empty-lines 1)
	      ("jm" "Meeting" entry
	       (file+olp+datetree "~/org/beorg/org/Journal.org")
	       "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
	       :clock-in :clock-resume
	       :empty-lines 1)

	      ("e" "Email Workflow")
	      ("ef" "Follow Up" entry (file+olp "~/org/beorg/org/Mails.org" "Follow Up")
	       "* TODO Follow up with %:fromname on %a\nSCHEDULED:%t\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n\n%i" :immediate-finish t)
	      ("er" "Read Later" entry (file+olp "~/org/beorg/org/Mails.org" "Read Later")
	       "* TODO Read %:subject\nSCHEDULED:%t\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n\n%a\n\n%i" :immediate-finish t)

	      ("w" "Workflows")
	      ("we" "Checking Email" entry (file+olp+datetree "~/org/beorg/org/Journal.org")
	       "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

	      ("m" "Metrics Capture")
	      ("mw" "Weight" table-line (file+headline "~/org/beorg/org/Metrics.org" "Weight")
	       "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))
      (message "org ready ✔"))
#+end_src
** Org-Agenda
#+begin_src emacs-lisp
  (use-package org-agenda
    :ensure nil
    :defer t
    :after org
    :commands (org-agenda)
    :bind (("C-c a" . org-agenda))
    :config
    (setq org-agenda-include-diary t)
    (setq org-agenda-start-with-log-mode t)
    (setq org-agenda-files '("~/org/beorg/org/Tasks.org"
			     "~/org/beorg/org/Habits.org"
			     "~/org/beorg/org/Mails.org"
			     "~/org/beorg/org/Birthdays.org"))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
	  '(("d" "Dashboard"
	     ((agenda "" ((org-deadline-warning-days 7)))
	      (todo "NEXT"
		    ((org-agenda-overriding-header "Next Tasks")))
	      (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

	    ("n" "Next Tasks"
	     ((todo "NEXT"
		    ((org-agenda-overriding-header "Next Tasks")))))

	    ("W" "Work Tasks" tags-todo "+work-email")

	    ;; Low-effort next actions
	    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
	     ((org-agenda-overriding-header "Low Effort Tasks")
	      (org-agenda-max-todos 20)
	      (org-agenda-files org-agenda-files)))

	    ("w" "Workflow Status"
	     ((todo "WAIT"
		    ((org-agenda-overriding-header "Waiting on External")
		     (org-agenda-files org-agenda-files)))
	      (todo "REVIEW"
		    ((org-agenda-overriding-header "In Review")
		     (org-agenda-files org-agenda-files)))
	      (todo "PLAN"
		    ((org-agenda-overriding-header "In Planning")
		     (org-agenda-todo-list-sublevels nil)
		     (org-agenda-files org-agenda-files)))
	      (todo "BACKLOG"
		    ((org-agenda-overriding-header "Project Backlog")
		     (org-agenda-todo-list-sublevels nil)
		     (org-agenda-files org-agenda-files)))
	      (todo "READY"
		    ((org-agenda-overriding-header "Ready for Work")
		     (org-agenda-files org-agenda-files)))
	      (todo "ACTIVE"
		    ((org-agenda-overriding-header "Active Projects")
		     (org-agenda-files org-agenda-files)))
	      (todo "COMPLETED"
		    ((org-agenda-overriding-header "Completed Projects")
		     (org-agenda-files org-agenda-files)))
	      (todo "CANC"
		    ((org-agenda-overriding-header "Cancelled Projects")
		     (org-agenda-files org-agenda-files)))))))

    (message "org-agenda ready ✔"))
#+end_src
** Org Protocol
#+begin_src emacs-lisp
  (use-package org-protocol
    :ensure nil
    :after org
    :config
    (message "org-protocol ready ✔"))
#+end_src
** Org Habit
#+begin_src emacs-lisp
  (use-package org-habit
    :ensure nil
    :after org
    :commands (org-habit-toggle-habits org-habit-toggle-display-in-agenda)
    :config (progn
	      (add-to-list 'org-modules 'org-habit)
	      (setq org-habit-graph-column 60))
    (message "org-habit ready ✔"))
#+end_src
** Org Babel 
#+begin_src emacs-lisp
    (use-package ob-napkin
      :after ob
      :config
      (add-to-list 'org-src-lang-modes '("napkin-puml" . plantuml))
      (message "ob-napkin ready ✔"))

    (use-package ob-restclient
      :after ob
      :config
      (add-to-list 'org-src-lang-modes '("restclient" . restclient))
      (message "ob-restclient ready ✔"))

    (use-package ob
      :ensure nil
      :hook (org-babel-after-execute . org-redisplay-inline-images)
      :config (progn
		;; load more languages for org-babel
		(org-babel-do-load-languages
		 'org-babel-load-languages
		 '((R . t)
		   ;; (C . t)
		   ;; (lua . t)
		   ;; (sql . t)
		   (sqlite . t)
		   (shell . t)
		   ;; (julia . t)
		   (latex . t)
		   (python . t)
		   ;; (gnuplot . t)
		   (plantuml . t)
		   (restclient . t)
		   (emacs-lisp . t)
		   (jupyter . t)))
		;; (setq org-babel-default-header-args:sh    '((:results . "output replace"))
		;;       org-babel-default-header-args:bash  '((:results . "output replace"))
		;;       org-babel-default-header-args:shell '((:results . "output replace"))
		;;       org-babel-default-header-args:python '((:results . "output replace")))
		(add-to-list 'org-src-lang-modes (quote ("plantuml" . plantuml)))))
#+end_src

** Org Tempo
#+begin_src emacs-lisp
  (use-package org-tempo
    :ensure nil
    :after org
    :config (progn
	      (add-to-list 'org-structure-template-alist '("R"  . "src R"))
	      (add-to-list 'org-structure-template-alist '("cl" . "src C"))
	      (add-to-list 'org-structure-template-alist '("cp" . "src C++"))
	      (add-to-list 'org-structure-template-alist '("gp" . "src gnuplot"))
	      (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
	      (add-to-list 'org-structure-template-alist '("jp" . "src jupyter-python"))
	      (add-to-list 'org-structure-template-alist '("jr" . "src jupyter-r"))
	      (add-to-list 'org-structure-template-alist '("np" . "src napkin"))
	      (add-to-list 'org-structure-template-alist '("pu" . "src plantuml"))
	      (add-to-list 'org-structure-template-alist '("py" . "src python"))
	      (add-to-list 'org-structure-template-alist '("rc" . "src restclient"))
	      (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
	      ;;(add-to-list 'org-structure-template-alist '("npp". "src napkin-puml"))
	      (add-to-list 'org-structure-template-alist '("sql". "src sql-mode"))))
#+end_src
** Org Modern
#+begin_src emacs-lisp
  (use-package org-modern
    :after org
    :config
    ;; (setq org-modern-star '("" "" "" "" "" "" ""))
    (setq org-modern-hide-star t))
#+end_src
** Ox Reveal
#+begin_src emacs-lisp
  (use-package ox-reveal
    :defer 5
    :after org  
    :config
    (message "ox-reveal ready"))
#+end_src
** Org Present
#+begin_src emacs-lisp
  (use-package dslide 
    :bind ((:map dslide-mode-map 
                 ("<left>" . dslide-deck-backward)
                 ("<right>" . dslide-deck-forward)
                 ("<escape>" . dslide-deck-stop))
           (:map org-mode-map 
                 ("<f5>" . dslide-deck-start)))
    :config
    (message "dslide loaded"))
#+end_src
** Org Pandoc
#+begin_src emacs-lisp
  (use-package ox-pandoc
    :ensure-system-package
    (pandoc . pandoc)
    :after org
    :config
    (message "Ox Pandoc ready ✔"))
#+end_src
* Notes
** Org Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :init
    (setq org-roam-v2-ack t)
    (setq org-roam-capture-templates '(("d" "default" plain "%?" :target
                                        (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                                   "#+title: ${title}\n#+date: %u\n#+lastmod: %t\n#+filetags: :emacs:note:roam: \n")
                                        :unnarrowed t)))
    :custom
    (org-roam-directory "~/org/notes/roam")
    ;; (org-roam-completion-everywhere t)
    :bind (("C-c n f" . org-roam-node-find)
           ("C-c n r" . org-roam-node-random)		    
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           ("C-c n a" . org-roam-alias-add)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n l" . org-roam-buffer-toggle)
           ("C-c n o" . org-id-get-create)
           ("C-c n t" . org-roam-tag-add)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode)
    (message "org-roam loaded  ✔"))
#+end_src
** Org Roam UI
#+begin_src emacs-lisp

  (use-package org-roam-ui
    :requires org-roam
    :after org-roam
    :commands (org-roam-ui-mode)

    :config
    (setq org-roam-ui-sync-theme t
	  org-roam-ui-browser-function #'xwidget-webkit-browse-url
	  org-roam-ui-follow t
	  org-roam-ui-update-on-save t
	  org-roam-ui-open-on-start t)

    (message "org-roam-ui loaded  ✔"))
#+end_src
** Consult-Org-Roam
#+begin_src emacs-lisp
  (use-package consult-org-roam
    :after (consult org-roam)
    :bind
    ("C-c n e" . consult-org-roam-file-find)
    ("C-c n b" . consult-org-roam-backlinks)
    ("C-c n r" . consult-org-roam-search)
    :init
    ;; (require 'consult-org-roam)
    ;; Activate the minor-mode
    (consult-org-roam-mode 1)
    :custom
    (consult-org-roam-grep-func #'consult-ripgrep)
    :config
    ;; Eventually suppress previewing for certain functions
    (consult-customize
     consult-org-roam-forward-links
     :preview-key (kbd "M-."))
    (message "consult-org roam loaded  ✔"))
#+end_src
* Media
** Vuiet 
#+begin_src emacs-lisp
  (use-package  vuiet
    :requires lastfm
    :config
    (general-define-key
     :keymaps '(vuiet-mode-map)
     :states '(normal)
     "<return>" 'org-open-at-point)

    (setq vuiet-update-mode-line-automatically t)
    (setq vuiet-update-mode-line-interval 1)
    (add-to-list 'mpv-default-options "--idle")
    (setq mpv-start-timeout 10)

    (message "vuiet loaded  ✔"))
#+end_src
** MPC
#+begin_src emacs-lisp
  (use-package mpc
    :ensure-system-package
    (mpd . mpd)
    (mpc . mpc)
    (ncmpcpp . ncmpcpp)

    :commands (mpc)
    :config
    (message "mpc loaded  ✔"))
#+end_src
** MPV
#+begin_src emacs-lisp
  (use-package mpv
    :ensure-system-package
    (mpv . mpv)
    :commands (mpv-start mpv-play mpv-play-url)
    :config
    (add-to-list 'mpv-default-options "--idle")
    (message "mpv loaded  ✔"))
#+end_src
* News Reader & IRC
#+begin_src emacs-lisp
  (use-package newsticker
    :ensure nil
    :commands (newsticker-treeview newsticker-start newsticker-plainview)
    :init
    (setq newsticker-url-list '(("stackoverflow.com - emacs" "https://stackoverflow.com/feeds/tag?tagnames=emacs&sort=newest" nil nil nil)
                                ("More Productive with Emacs" "https://lucidmanager.org/tags/emacs/index.xml" nil nil nil)
                                ("Emacs on Reddit" "http://www.reddit.com/r/emacs/.rss" nil nil nil)
                                ("Prog Memes on Reddit" "http://www.reddit.com/r/ProgrammerHumor/.rss" nil nil nil)

                                ("Org Upcoming Changes" "https://updates.orgmode.org/feed/changes" nil nil nil)
                                ("Org Help requests" "https://updates.orgmode.org/feed/help" nil nil nil)
                                ("Org confirmed Bugs" "https://updates.orgmode.org/feed/bugs" nil nil nil)
                                ("Org News Update" "https://updates.orgmode.org/feed/updates" nil nil nil)
                                ("Org This Month" "https://blog.tecosaur.com/tmio/rss.xml" nil nil nil)

                                ("Framework" "https://blog.tecosaur.com/tmio/rss.xml" nil nil nil)

                                ("Memes on Reddit" "http://www.reddit.com/r/memes/.rss" nil nil nil)
                                ("CNN" "http://rss.cnn.com/rss/edition_world.rss" nil nil nil)
                                ("TheHackerNews" "https://feeds.feedburner.com/TheHackersNews" nil nil nil)))
    :config
    (setq newsticker-retrieval-method #'intern)
    (message "newsticker ready ✔"))
#+end_src

* Games
** Key-quiz
#+begin_src emacs-lisp
  (use-package key-quiz
    :disabled
    :init
    (evil-set-initial-state 'key-quiz-mode 'emacs)
    :config
    (message "speed-type ready ✔"))
#+end_src
** Speed-Type
#+begin_src emacs-lisp
  (use-package speed-type
    :disabled
    :hook (speed-type-mode . (lambda ()
                               (text-scale-set 1.5)))
    :init
    (evil-set-initial-state 'speed-type-mode 'insert)
    :config
    (message "speed-type ready ✔"))
#+end_src
* Timer and Watcher
#+begin_src emacs-lisp
  (use-package hammy
    :disabled
    :config
    (hammy-define (propertize "🍅" 'face '(:foreground "tomato"))
      :documentation "The classic pomodoro timer."
      :intervals
      (list
       (interval :name "Work"
                 :duration "25 minutes"
                 :before (do (announce "Starting work time.")
                             (notify "Starting work time."))
                 :advance (do (announce "Break time!")
                              (notify "Break time!")))
       (interval :name "Break"
                 :duration (do (if (and (not (zerop cycles))
                                        (zerop (mod cycles 3)))
                                   ;; If a multiple of three cycles have
                                   ;; elapsed, the fourth work period was
                                   ;; just completed, so take a longer break.
                                   "30 minutes"
                                 "5 minutes"))
                 :before (do (announce "Starting break time.")
                             (notify "Starting break time."))
                 :advance (do (announce "Break time is over!")
                              (notify "Break time is over!")))))
    (message "hammy ready ✔"))

  (use-package activity-watch-mode
    :disabled
    ;; :hook (projectile-after-switch-project . (lambda ()
    ;;                                (activity-watch-mode)))
    :config
    (message "activity-watch ready ✔"))
#+end_src
* Utilities
** CRDT
#+begin_src emacs-lisp
  (use-package crdt
    :ensure-system-package
    (tuntox . tuntox)
    :commands (crdt-share-buffer
               crdt-connect)
    :config
    (setq crdt-use-tuntox t
          crdt-tuntox-executable "/opt/homebrew/bin/tuntox") 
    (message "CRDT ready ✔"))
#+end_src

** Ledger
#+begin_src emacs-lisp
  (use-package hledger-mode
    :disabled
    :ensure-system-package
    (hledger . hledger)

    ;; To open files with .journal extension in hledger-mode
    :mode ("\\.journal\\'" . hledger-mode)
    :config

    ;; Provide the path to you journal file.
    ;; The default location is too opinionated.
    ;; (setq hledger-jfile "/path/to/your/journal-file.journal")

    ;; Auto-completion for account names
    ;; For company-mode users,
    ;; (add-to-list 'company-backends 'hledger-company)
    (message "hledger loaded  ✔"))
#+end_src

** Docker
#+begin_src emacs-lisp
  (use-package docker
    :commands (docker)
    :config
    (message "docker loaded ✔"))
#+end_src

* Key binding
** Evil
#+begin_src emacs-lisp
  (defun custom/force-normal-state-or-exit ()
    (interactive)
    (cond
     ((eq evil-state 'normal) (keyboard-quit))
     (t (evil-force-normal-state))))

  (use-package evil
    :demand t 

    :bind ((:map evil-normal-state-map
                 ("<escape>" . custom/force-normal-state-or-exit)))

    :init
    (setq evil-want-C-i-jump nil
          evil-want-C-u-delete t
          evil-want-C-u-scroll t
          evil-want-C-h-delete t
          evil-want-C-w-in-emacs-state t
          evil-want-integration t
          evil-want-keybinding nil
          evil-undo-system 'undo-fu
          evil-want-fine-undo t) 

    :config
    (setq evil-ex-search-case "insensitive"
          evil-echo-state t
          evil-auto-balance-w nil)
    (evil-mode 1)
    (message "Done Loading Evil"))
#+end_src
** Evil Collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    ;; (evil-set-initial-state 'calc-mode 'emacs)

    :config
    (condition-case err
	(evil-collection-init)
      (error (message "Error initializing evil-collection-init: %S" err))))

  (use-package evil-matchit
    :requires evil)

  (use-package evil-surround
    :requires evil

    :hook ((text-mode prog-mode) . (lambda ()
				     (evil-surround-mode)
				     (evil-matchit-mode))))

#+end_src
** General
#+begin_src emacs-lisp
  (defun my/move-to-middle ()
    (interactive)
    (let* ((begin (line-beginning-position))
	   (end (line-end-position))
	   (middle (/ (+ end begin) 2)))
      (goto-char middle)))

  (use-package general
    :after evil
    :config
    (general-evil-setup t)

    (general-nvmap
      "g \\" 'toggle-line-number
      "g m" 'my/move-to-middle
      "; ;" 'evil-buffer
      ;; "SPC f" 'find-file
      ;; "SPC F" 'find-file-other-window
      "SPC b" 'consult-buffer
      "SPC B" 'consult-buffer-other-window
      "SPC w" (general-simulate-key "C-w")
      "SPC x" (general-simulate-key "C-x")
      "SPC v" (general-simulate-key "C-x v")
      "SPC c" (general-simulate-key "C-c")
      "SPC g" (general-simulate-key "M-g")
      "SPC s" (general-simulate-key "M-s"))

    (general-define-key
     :keymaps '(normal visual)
     :prefix "g SPC"
     "x" (general-simulate-key "C-c C-c"))

    (general-define-key
     :keymaps '(transient-base-map)
     "<escape>" 'transient-quit-one)


    (general-define-key
     :keymaps '(normal insert visual emacs)
     "<C-escape>" 'keyboard-quit))

#+end_src

** Which-Key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config (setq which-key-idle-delay 0.3))
#+end_src
** Helper
#+begin_src emacs-lisp
  (defun custom/display-buffer-at-bottom ()
    (interactive)
    (let ((buffer (current-buffer)))
      (with-current-buffer buffer
        (delete-window)
        (display-buffer-at-bottom
         buffer '(;; (window-parameters . ((mode-line-format . (" " "%b"))))
                      ;; (window-height . 0.25)
                      )))))

  (defun move-line-up ()
    "Move the current line up or move the highlighted region up."
    (interactive)
    (if (region-active-p)
        (let ((beg (region-beginning))
              (end (region-end)))
          (save-excursion
            (goto-char beg)
            (transpose-lines 1)
            (forward-line -1)
            (goto-char end)
            (transpose-lines 1)))
      (transpose-lines 1)
      (forward-line -2)))

  (defun move-line-down ()
    "Move the current line down or move the highlighted region down."
    (interactive)
    (if (region-active-p)
        (let ((beg (region-beginning))
              (end (region-end)))
          (save-excursion
            (goto-char end)
            (forward-line 1)
            (transpose-lines 1)
            (forward-line -1)
            (goto-char beg)
            (transpose-lines 1)))
      (forward-line 1)
      (transpose-lines 1)
      (forward-line -1)))

  (global-set-key (kbd "M-<up>") 'move-line-up)
  (global-set-key (kbd "M-<down>") 'move-line-down)
#+end_src

** Font and Windows
#+begin_src emacs-lisp
  ;; For current frame
  ;; (set-frame-parameter nil 'alpha-background 100) ; not working

  ;; For all new frames henceforth
  (add-to-list 'default-frame-alist '(height . 35))
  (add-to-list 'default-frame-alist '(width . 115))

  (use-package window
    :ensure nil
    :bind (("<f8>" . window-toggle-side-windows))
    :config
    (custom-set-variables
     '(display-buffer-base-action
       '((display-buffer--maybe-same-window
	  display-buffer-reuse-window
	  display-buffer--maybe-pop-up-frame-or-window
	  display-buffer-in-previous-window
	  display-buffer-below-selected
	  display-buffer-at-bottom
	  display-buffer-pop-up-frame))))
    (setq
     split-width-threshold 0
     split-height-threshold nil)

    (setq display-buffer-alist '(("\\*eshell\\*"
				  (display-buffer-in-side-window)
				  (window-height . 0.25)
				  (side . bottom)
				  (slot . -1)
				  (window-parameters (mode-line-format . none)))))


    (setq display-buffer-alist 
	  '(("\\*Occur\\*"
	     (display-buffer-reuse-window display-buffer-in-side-window)
	     (side . right)
	     (slot . -1)
	     (window-width . 0.5))))

    (setq display-buffer-alist 
	  '(("\\*\\(Backtrace\\|Warnings\\|Flycheck errors\\|Compile-log\\|Messages|compilation\\)\\*"
	     (display-buffer-in-side-window)
	     (window-height . 0.25)
	     (side . bottom)
	     (slot . 1)))))

  ;; ;;[Hh]elp
  ;; ("\\*help" 
  ;;  (display-buffer-reuse-window display-buffer-in-side-window)
  ;;  (window-width . 75))

  ;; (defun efs/set-font-faces ()
  ;;   (message "Setting faces!")
  ;;   (set-face-attribute 'default nil :font "FiraCode Nerd Font" :height 168)

  ;;   ;; Set the fixed pitch face
  ;;   (set-face-attribute 'fixed-pitch nil :font "FiraCode Nerd Font" :height 168)

  ;;   ;; Set the variable pitch face
  ;;   (set-face-attribute 'variable-pitch nil :font "FiraCode Nerd Font" :height 168 :weight 'regular))

  ;; (if (daemonp)
  ;;     (add-hook 'after-make-frame-functions
  ;; 	      (lambda (frame)
  ;; 		(with-selected-frame frame
  ;; 		  (efs/set-font-faces))))
  ;;   (efs/set-font-faces)
#+end_src

# Local Variables:
# org-confirm-babel-evaluate: nil
# eval: (add-hook 'after-save-hook 'org-babel-tangle nil t)
# End:




