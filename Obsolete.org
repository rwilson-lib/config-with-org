* Obsolete Code
** Org Mine
#+begin_src emacs-lisp :tangle no 
  ;; (use-package org-mime
  ;;   :after mu4e
  ;;   :config
  ;;   (setq org-mime-export-options '(:section-numbers nil
  ;;                                                    :with-author nil
  ;;                                                    :with-toc nil))
  ;;   (add-hook 'org-mime-html-hook
  ;;             (lambda ()
  ;;               (org-mime-change-element-style
  ;;                "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
  ;;                              "#E6E1DC" "#232323")))))
#+end_src

** Weir fixed for Emacs MacOS 
#+begin_src emacs-lisp :tangle no
  ;; (when (eq system-type 'darwin) (customize-set-variable 'native-comp-driver-options '("-Wl,-w")))
#+end_src

** Auto Tangle Configuration files
#+begin_src emacs-lisp :tangle no
  ;; Automatically tangle our Emacs.org config file when we save it
  ;; (defun efs/org-babel-tangle-config ()
  ;;      (when (string-equal (buffer-file-name)
  ;;                          (expand-file-name "~/org/Emacs.org"))
  ;;        ;; Dynamic scoping to the rescue
  ;;        (let ((org-confirm-babel-evaluate nil))
  ;;          (org-babel-tangle))))
  ;; (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src
** Counsel Ivy
#+begin_src emacs-lisp :tangle no
  ;; (use-package counsel
  ;;   :after ivy
  ;;   :bind (("M-x" . counsel-M-x)
  ;;          ("C-:" . counsel-M-x)
  ;;          ("C-x b" . counsel-ibuffer)
  ;;          ("C-x C-b" . counsel-switch-buffer)
  ;;          ("C-x C-f" . counsel-find-file)
  ;;          :map minibuffer-local-map
  ;;          ("C-r" . counsel-minibuffer-history))
  ;;   :config (setq ivy-initial-inputs-alist nil))

  ;; (use-package ivy
  ;;   :diminish
  ;;   :bind (("C-s" . swiper)
  ;;          :map ivy-minibuffer-map
  ;;          ("TAB" . ivy-alt-done)
  ;;          ("C-l" . ivy-alt-done)
  ;;          ("C-j" . ivy-next-line)
  ;;          ("C-k" . ivy-previous-line)
  ;;          :map ivy-switch-buffer-map
  ;;          ("C-k" . ivy-previous-line)
  ;;          ("C-l" . ivy-done)
  ;;          ("C-d" . ivy-switch-buffer-kill)
  ;;          :map ivy-reverse-i-search-map
  ;;          ("C-k" . ivy-previous-line)
  ;;          ("C-d" . ivy-reverse-i-search-kill))
  ;;   :config
  ;;   (ivy-mode 1))

  ;; (use-package ivy-rich
  ;;   :init (ivy-rich-mode 1)) 
#+end_src
** Highlight
#+begin_src emacs-lisp :tangle no
  ;; (use-package hl-block-mode
  ;;   :config
  ;;   ;;activate in the current buffer.
  ;;   (global-hl-block-mode))
#+end_src

** DAP
#+begin_src emacs-lisp :tangle no
  ;; (use-package dap-mode
  ;;   :after lsp-mode
  ;;   :config
  ;;   ;; Bind `C-c l d` to `dap-hydra` for easy access
  ;;   (general-define-key
  ;;    :keymaps 'lsp-mode-map
  ;;    :prefix lsp-keymap-prefix
  ;;    "d" '(dap-hydra t :wk "debugger"))
  ;;   ;; Set up Node debugging
  ;;   ;; (require 'dap-node)
  ;;   ;; (dap-node-setup) ;; Automatically installs Node debug adapter if needed
  ;;   ;; (require 'dap-go)
  ;;   ;; (dap-go-setup)
  ;;   ;; (require 'dap-hydra)
  ;;   ;; (require 'dap-gdb-lldb)
  ;;   ;; (dap-gdb-lldb-setup)
  ;;   (require 'dap-ui)
  ;;   (dap-mode t)
  ;;   (dap-ui-mode t)
  ;;   ;; enables mouse hover support
  ;;   (dap-tooltip-mode t)
  ;;   ;; if it is not enabled `dap-mode' will use the minibuffer.
  ;;   (tooltip-mode t)
  ;;   :commands dap-debug
  ;;   :custom
  ;;   ;; (lsp-enable-dap-auto-configure nil)
  ;;   ;; (dap-python-executable "python3")
  ;;   (dap-python-debugger 'debugpy)
  ;;   (dap-auto-configure-features '(sessions locals controls tooltip)))

  ;; ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

  ;; ;; base lang
  ;; (provide 'lang)

  ;; python dap config
  ;; :hook (python-mode . lsp-deferred)
  ;; :custom
  ;; (dap-python-executable "python")
  ;; (dap-python-debugger 'debugpy)

  ;;(require 'dap-python)
  ;; lang python
  ;;(provide 'lang-python)
#+end_src
** LSP-UI
#+begin_src emacs-lisp :tangle no
  ;; (use-package lsp-ui
  ;;   :after lsp-mode
  ;;   :hook (lsp-mode . lsp-ui-mode)
  ;;   ;; :custom (lsp-ui-doc-position 'bottom)
  ;;   :config (setq lsp-ui-sideline-show-hover t
  ;;                 lsp-ui-sideline-delay 0.5
  ;;                 lsp-ui-doc-delay 5
  ;;                 lsp-ui-sideline-ignore-duplicates t
  ;;                 ;; lsp-ui-sideline-enable nil
  ;;                 lsp-ui-doc-position 'bottom
  ;;                 lsp-ui-doc-alignment 'frame
  ;;                 lsp-ui-doc-header nil
  ;;                 lsp-ui-doc-include-signature t
  ;;                 lsp-ui-doc-use-childframe t)
  ;;   (general-define-key
  ;;    :keymaps '(lsp-ui-mode-map)
  ;;    :states '(normal)
  ;;    "gd" 'lsp-ui-peek-find-definitions
  ;;    "gr" 'lsp-ui-peek-find-references
  ;;    "gi" 'lsp-ui-peek-find-implementation
  ;;    "Ni" 'lsp-ui-imenu)

  ;;   (general-define-key
  ;;    :keymaps '(lsp-ui-peek-mode-map)
  ;;    "C-k" 'lsp-ui-peek--select-prev
  ;;    "C-j" 'lsp-ui-peek--select-next
  ;;    "C-l" 'lsp-ui-peek--select-next-file
  ;;    "C-h" 'lsp-ui-peek--select-prev-file
  ;;    "C-<return>" 'lsp-ui-peek--goto-xref-other-window))

  ;; (use-package lsp-treemacs
  ;;   :after lsp)

  ;; ;; (use-package sideline
  ;; ;;   :hook (lsp-mode . sideline-mode)
  ;;   :init
  ;;   (setq sideline-backends-right '(sideline-lsp)))

#+end_src
** Language Server Protocol
#+begin_src emacs-lisp :tangle no
  ;; (setq gc-cons-threshold 100000000)
  ;; (setq read-process-output-max (* 1024 1024)) ;; 1mb

  ;; (defun efs/lsp-mode-setup ()
  ;;   (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  ;;   (lsp-headerline-breadcrumb-mode))

  ;; (use-package lsp-mode
  ;;   :commands (lsp lsp-deferred)

  ;;   :hook
  ;;   (lsp-mode . efs/lsp-mode-setup)

  ;;   :bind-keymap
  ;;   ("C-c l" . lsp-command-map)

  ;;   :bind (:map lsp-mode-map
  ;;               ("M-g S" . consult-lsp-symbols) 
  ;;               ("M-g s" . consult-lsp-file-symbols) 
  ;;               ("C-!" . lsp-execute-code-action)
  ;;               ("<tab>" . company-indent-or-complete-common))

  ;;   :config
  ;;   (setq lsp-idle-delay 0.5
  ;;         ;;lsp-enable-symbol-highlighting t
  ;;         ;;Not supported by company capf, which is the recommended company backend
  ;;         lsp-enable-snippet nil))

  ;; ;;  (add-hook 'python-mode-hook
  ;; ;;            (lambda ()
  ;; ;;              (lsp-python-enable)))

  ;; ;;  (setq lsp-pyls-plugins-flake8-enabled t)
  ;; ;;  (lsp-register-custom-settings
  ;; ;; '(("pyls.plugins.pyls_mypy.enabled" t t)
  ;; ;;   ("pyls.plugins.pyls_mypy.live_mode" nil t)
  ;; ;;   ("pyls.plugins.pyls_black.enabled" t t)
  ;; ;;   ("pyls.plugins.pyls_isort.enabled" t t)

  ;; ;;   ;; Disable these as they're duplicated by flake8
  ;; ;;   ("pyls.plugins.pycodestyle.enabled" nil t)
  ;; ;;   ("pyls.plugins.mccabe.enabled" nil t)
  ;; ;;   ("pyls.plugins.pyflakes.enabled" nil t))))

  ;; (use-package consult-lsp)
#+end_src

** Shell and Envs
#+begin_src emacs-lisp :tangle no
  ;; (use-package exec-path-from-shell
  ;;   :config (exec-path-from-shell-initialize))
#+end_src

** Popper
#+begin_src emacs-lisp :tangle no
    ;; (use-package popper
    ;;   :init
    ;;   (setq popper-reference-buffers
    ;;         '(compilation-mode
    ;;           messages-mode
    ;;           help-mode
    ;;           occur-mode
    ;;           "^\\*Warning\\*"
    ;;           "^\\*Compile-Log\\*"
    ;;           "^\\*Messages\\*"
    ;;           "^\\*Backtrace\\*"
    ;;           "^\\*evil-registers\*"
    ;;           "^\\*Apropos\\*"
    ;;           "^Calc:"
    ;;           "^\\*ielm\\*"
    ;;           "^\\*TeX Help\\*"
    ;;           "^\\*Shell Command Output\\*"
    ;;           "^\\*Async Shell Command\\*"
    ;;           "^\\*Completions\\*"
    ;;           "[Oo]utput\\*"))
    ;;   :config
    ;;   ;; Match eshell, shell, term and/or vterm buffers
    ;;   (setq popper-reference-buffers
    ;;         (append popper-reference-buffers
    ;;                 '("^\\*eshell.*\\*$" eshell-mode ;eshell as a popup
    ;;                   "^\\*shell.*\\*$"  shell-mode  ;shell as a popup
    ;;                   "^\\*term.*\\*$"   term-mode   ;term as a popup
    ;;                   "^\\*vterm.*\\*$"  vterm-mode  ;vterm as a popup
    ;;                   )))

    ;;   (setq popper-mode-line 'nil)
    ;;   (setq popper-display-control 'user))

#+end_src

** Async
#+begin_src emacs-lisp :tangle no
  ;; (use-package async-await
  ;;   :config
  ;;   ;; (async-bytecomp-package-mode 1)
  ;;   (message "Done Loading Async Await"))
#+end_src
** Format all
#+begin_src emacs-lisp :tangle no
  ;; (use-package format-all
    ;; :defer 3
  ;;   :bind (("C-=" . 'format-all-buffer))
  ;;   :config
  ;;   (add-hook 'prog-mode-hook 'format-all-mode)
  ;;   (message "format-all loaded"))

  ;; (use-package aggressive-indent
  ;;   :hook
  ;;   (prog-mode . aggressive-indent-mode)
  ;;   :config
  ;;   (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
  ;;   (add-to-list 'aggressive-indent-excluded-modes 'json-mode)
  ;;   (add-to-list
  ;;    'aggressive-indent-dont-indent-if
  ;;    '(and (derived-mode-p 'c++-mode)
  ;;          (null (string-match "\\([;{}]\\|\\b\\(if\\|for\\|while\\)\\b\\)"
  ;;                              (thing-at-point 'line)))))
  ;;   (add-to-list
  ;;    'aggressive-indent-dont-indent-if
  ;;    '(and (derived-mode-p 'python-mode)
  ;;          (null (string-match "\\([:;{}]\\|\\b\\(if\\|for\\|while\\)\\b\\)"
  ;;                              (thing-at-point 'line))))))

#+end_src
** Tree-Sitter
#+begin_src emacs-lisp :tangle no
  ;; (use-package tree-sitter
  ;;   :init
  ;;   (use-package tree-sitter-langs)
  ;;   :config 
  ;;   (global-tree-sitter-mode)
  ;;   (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
  ;;   (message "tree-sitter loaded"))

#+end_src

** LSP-Python-ms
#+begin_src emacs-lisp :tangle no
  ;; (use-package lsp-python-ms
  ;;   :init (setq lsp-python-ms-auto-install-server t)
  ;;   :hook (python-mode . (lambda ()
  ;;                          (require 'lsp-python-ms)
  ;;                          (lsp))))  ; or lsp-deferred

#+end_src
** Utilities Function
#+begin_src emacs-lisp :tangle no
  ;; (defun vim-open-buffer ()
  ;;   (interactive)
  ;;   (async-shell-command
  ;;    (format "vim -u NONE +%d %s"
  ;; 	   (+ (if (bolp) 1 0) (count-lines 1 (point)))
  ;; 	   (shell-quote-argument buffer-file-name))))

  ;; Check os type
  ;; (pcase system-type
  ;;   ('gnu/linux "Its Linux")
  ;;   ('darwin "Its MacOs")
  ;;   ('windows-nt "Its Windows"))

  ;; ;; Check emacs is runing in a daemon
  ;; (if (daemonp)
  ;;     (message "Loading in the daemond")
  ;;   (message "Loading in regular Emacs!"))
#+end_src
** Corfu
#+begin_src emacs-lisp :tangle no
  ;; (use-package corfu
  ;;   ;; Optional customizations
  ;;   :custom
  ;;   (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  ;;   (corfu-auto t)                 ;; Enable auto completion
  ;;   ;; (corfu-separator ?\s)       ;; Orderless field separator
  ;;   (corfu-quit-at-boundary t)     ;; Never quit at completion boundary
  ;;   ;; (corfu-quit-no-match nil)   ;; Never quit, even if there is no match
  ;;   (corfu-preview-current t)      ;; Enable current candidate preview
  ;;   ;; (corfu-preselect-first nil) ;; Disable candidate preselection
  ;;   ;; (corfu-on-exact-match nil)  ;; Configure handling of exact matches
  ;;   (corfu-echo-documentation t)   ;; Enable documentation in the echo area
  ;;   (corfu-scroll-margin 5)        ;; Use scroll margin
  ;;   (corfu-auto-prefix 1)
  ;;   (corfu-auto-delay 0.0)

    ;; You may want to enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since dabbrev can be used globally (M-/).

    ;; :init
    ;; (corfu-global-mode)

    ;;   :config
    ;;     (set-face-attribute 'corfu-annotations nil
    ;;                         :inherit 'font-lock-keyword-face
    ;;                         :foreground nil :background nil)
    ;;     (set-face-attribute 'corfu-default nil
    ;;                         :inherit 'company-echo
    ;;                         :foreground nil :background nil))
    ;; :bind
    ;; (:map corfu-map
    ;;       ("C-j" . corfu-next)
    ;;       ("C-k" . corfu-previous)))

  ;; (use-package corfu-doc
  ;;   :hook (corfu-mode . corfu-doc-mode))
#+end_src

** Pyvenv
#+begin_src emacs-lisp :tangle no
     ;; (use-package pyvenv
    ;;   :after python-mode
    ;;   :config
    ;;   (pyvenv-mode 1)
    ;;   ;; Set correct Python interpreter
    ;;   (setq pyvenv-post-activate-hooks
    ;;         (list (lambda ()
    ;;                 (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python")))))
    ;;   (setq pyvenv-post-deactivate-hooks
    ;;         (list (lambda ()
    ;;                 (setq python-shell-interpreter (concat pyvenv-virtual-env "python3")))))

    ;;   (pyvenv-tracking-mo de 1))

#+end_src

** Encoding
#+begin_src emacs-lisp :tangle no
  ;; (setq mac-option-modifier 'meta)
  ;; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
  ;; (setq utf-translate-cjk-mode nil)

  ;; (set-language-environment 'utf-8)
  ;; (setq locale-coding-system 'utf-8)

  ;; ;; set the default encoding system
  ;; (prefer-coding-system 'utf-8)
  ;; (setq default-file-name-coding-system 'utf-8)
  ;; (set-default-coding-systems 'utf-8)
  ;; (set-terminal-coding-system 'utf-8)
  ;; (set-keyboard-coding-system 'utf-8)
  ;; ;; backwards compatibility as default-buffer-file-coding-system
  ;; ;; is deprecated in 23.2
  ;; (if (boundp buffer-file-coding-system)
  ;;     (setq buffer-file-coding-system 'utf-8)
  ;;   (setq default-buffer-file-coding-system 'utf-8))
#+end_src

** Lang-Tools
#+begin_src emacs-lisp :tangle no
  ;; (add-hook 'text-mode-hook
  ;;           (lambda () 
  ;;             (add-hook 'after-save-hook 'langtool-check nil 'make-it-local)))

  ;; (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
  ;;   (add-hook hook (lambda () (flyspell-mode -1))))
  ;; (defun langtool-autoshow-detail-popup (overlays)
  ;;   (when (require 'popup nil t)
  ;;     ;; Do not interrupt current popup
  ;;     (unless (or popup-instances
  ;;                 ;; suppress popup after type `C-g` .
  ;;                 (memq last-command '(keyboard-quit)))
  ;;       (let ((msg (langtool-details-error-message overlays)))
  ;;         (popup-tip msg)))))

  ;; (use-package langtool
    ;; :defer 10
  ;;   :init
  ;;   (setq langtool-language-tool-jar "~/bin/LanguageTool-5.6/languagetool-commandline.jar") 
  ;;   :bind (("\C-x4w" . langtool-check)
  ;;          ("\C-x4W" . langtool-check-done)
  ;;          ("\C-x4l" . langtool-switch-default-language)
  ;;          ("\C-x44" . langtool-show-message-at-point)
  ;;          ("\C-x4c" . langtool-correct-buffer))
  ;;   :config
  ;;   (set-face-attribute 'langtool-errline nil
  ;;                       :weight 'bold
  ;;                       :slant 'italic
  ;;                       :underline '(:color "pink" :style wave)
  ;;                       :foreground nil
  ;;                       :background nil)
  ;;   (setq langtool-mother-tongue "en"
  ;;         langtool-default-language "en-US"
  ;;         langtool-autoshow-message-function 'langtool-autoshow-detail-popup))
#+end_src

** Auto-Update
#+begin_src emacs-lisp :tangle no
  (use-package auto-package-update
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+end_src

** Lsp-Ltex
#+begin_src emacs-lisp :tangle no
  ;; (use-package lsp-ltex
  ;;   :init
  ;;   (setq lsp-ltex-version "15.2.0")
  ;;   :hook (latex-mode-hook . (lambda ()
  ;;                              (require 'lsp-ltex)
  ;;                              (lsp)))) ; or lsp-deferred
#+end_src
** Flash card
#+begin_src emacs-lisp :tangle no
  ;; (use-package org-anki
  ;;   :disabled
    ;; :defer 5
  ;;   :config
  ;;   (message "org-anki ready ✔"))
#+end_src
** Popper
#+begin_src emacs-lisp :tangle no
          ;; (use-package popper
          ;;   :init
          ;;   (setq popper-reference-buffers
          ;;         '(compilation-mode
          ;;           messages-mode
          ;;           help-mode
          ;;           occur-mode
          ;;           "^\\*Warning\\*"
          ;;           "^\\*Compile-Log\\*"
          ;;           "^\\*Messages\\*"
          ;;           "^\\*Backtrace\\*"
          ;;           "^\\*evil-registers\*"
          ;;           "^\\*Apropos\\*"
          ;;           "^Calc:"
          ;;           "^\\*ielm\\*"
          ;;           "^\\*TeX Help\\*"
          ;;           "^\\*Shell Command Output\\*"
          ;;           "^\\*Async Shell Command\\*"
          ;;           "^\\*Completions\\*"
          ;;           "[Oo]utput\\*"))
          ;;   :config
          ;;   ;; Match eshell, shell, term and/or vterm buffers
          ;;   (setq popper-reference-buffers
          ;;         (append popper-reference-buffers
          ;;                 '("^\\*eshell.*\\*$" eshell-mode ;eshell as a popup
          ;;                   "^\\*shell.*\\*$"  shell-mode  ;shell as a popup
          ;;                   "^\\*term.*\\*$"   term-mode   ;term as a popup
          ;;                   "^\\*vterm.*\\*$"  vterm-mode  ;vterm as a popup
          ;;                   )))

          ;;   (setq popper-mode-line 'nil)
          ;;   (setq popper-display-control 'user))
#+end_src
** Julia
#+begin_src emacs-lisp
  ;; (use-package julia-mode
  ;;  :defer 5)
#+end_src
** Folds
#+begin_src emacs-lisp :tangle no 
  (use-package vimish-fold
    ;; :defer 5 
    :efter evil)

  (use-package evil-vimish-fold
    ;; :defer 5
    :after vimish-fold
    :hook ((prog-mode conf-mode text-mode) . evil-vimish-fold-mode))
#+end_src

** Git Gutter
#+begin_src emacs-lisp :tangle no
  (use-package git-gutter
    :after magit
    :config
    (setq git-gutter:modified-sign nil
          git-gutter:added-sign nil
          git-gutter:deleted-sign nil)	
    
    (setq git-gutter:hide-gutter t
          git-gutter:visual-line t
          git-gutter:linum-enabled nil)
    (use-package git-gutter-fringe 
      :config
      (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
      (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
      (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))

    ;; (general-define-key
    ;;  :keymaps '(normal insert visual emacs)
    ;;  :prefix "SPC"
    ;;  :non-normal-prefix "C-x g h"
    ;;  "gc" 'git-gutter:mark-hunk)
    (global-git-gutter-mode)
    (message "Git-gutter ready ✔"))
    #+end_src
** Undo Tree
#+begin_src emacs-lisp :tangle no
  (use-package undo-tree
    :init
    (global-undo-tree-mode)
    :config
    (setq undo-tree-auto-save-history t))
#+end_src

** Caribbean Theme
#+begin_src emacs-lisp :tangle no
  (use-package timu-caribbean-theme)
    ;; :config
    ;; (load-theme 'timu-caribbean t))

#+end_src

** Snippet
#+begin_src emacs-lisp :tangle no
  (use-package js-react-redux-yasnippets)
#+end_src

** Thesaurus
#+begin_src emacs-lisp :tangle no
  (use-package mw-thesaurus
    ;; :defer 10
    :bind ((:map evil-normal-state-map
		 ("Z?" . mw-thesaurus-lookup-at-point)
		 ("z?" . mw-thesaurus-lookup-dwim)))
    :config
    (message "mw-theasaurus loaded ✔"))

  (use-package powerthesaurus
    ;; :defer 10
    :config
    (message "powerthesaurus loaded  ✔"))
#+end_src

** Org Superstar 
#+begin_src emacs-lisp :tangle no 
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :config
    (setq org-superstar-remove-leading-stars t))
#+end_src

** Atomic Chrome
#+begin_src emacs-lisp :tangle no 
  (use-package atomic-chrome
    :commands (atomic-chrome-start-server)
    :hook (after-init . atomic-chrome-start-server)
    :config
    (setq atomic-chrome-default-major-mode 'prog-mode)
    (setq atomic-chrome-extension-type-list '(ghost-text))
    (setq atomic-chrome-server-ghost-text-port 4001)
    (setq atomic-chrome-url-major-mode-alist
	  '(("github\\.com" . gfm-mode)
	    ("creator.zoho.com" . js2-mode)
	    ("overleaf.com" . latex-mode)
	    ("750words.com" . latex-mode)))
    (message "Atomic Chrome ready ✔"))
#+end_src





** Avy-flycheck
#+begin_src emacs-lisp :tangle no 
  (use-package avy-flycheck
    :after (avy flycheck)
    :config
    (message "avy-flycheck loaded! ✔"))
#+end_src

** Org Download
#+begin_src emacs-lisp :tangle no 
  (use-package org-download
    ;; :defer 5
    :after org
    :config
    (setq org-download-screenshot-method "screencapture"))
#+end_src
** Smart Parens
#+begin_src emacs-lisp
  (use-package smartparens)
#+end_src


** Evil-Text Object
#+begin_src emacs-lisp
  ;; (use-package evil-textobj-tree-sitter
  ;;   :config
  ;;   (general-define-key
  ;;    :keymaps '(evil-outer-text-objects-map)
  ;;    "/" (evil-textobj-tree-sitter-get-textobj "comment.outer")
  ;;    "=" (evil-textobj-tree-sitter-get-textobj "statement.outer")
  ;;    "." (evil-textobj-tree-sitter-get-textobj "block.outer")
  ;;    "&" (evil-textobj-tree-sitter-get-textobj "parameter.outer")
  ;;    "l" (evil-textobj-tree-sitter-get-textobj "loop.outer")
  ;;    "d" (evil-textobj-tree-sitter-get-textobj "conditional.outer")
  ;;    "c" (evil-textobj-tree-sitter-get-textobj "class.outer")
  ;;    "f" (evil-textobj-tree-sitter-get-textobj "function.outer"))

  ;;   (general-define-key
  ;;    :keymaps '(evil-inner-text-objects-map)
  ;;    "." (evil-textobj-tree-sitter-get-textobj "block.inner")
  ;;    "&" (evil-textobj-tree-sitter-get-textobj "parameter.inner")
  ;;    "l" (evil-textobj-tree-sitter-get-textobj "loop.inner")
  ;;    "d" (evil-textobj-tree-sitter-get-textobj "conditional.inner")
  ;;    "c" (evil-textobj-tree-sitter-get-textobj "class.inner")
  ;;    "f" (evil-textobj-tree-sitter-get-textobj "function.inner")))
#+end_src
** Treemac Persp
#+begin_src emacs-lisp
  ;;(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  ;;  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  ;;  :ensure t
  ;;  :config (treemacs-set-scope-type 'Perspectives))
#+end_src

** Projectile
#+begin_src emacs-lisp :tangle no 
  (use-package treemacs-projectile
    :after (treemacs projectile)
    :config
    (message "treemacs-projectile ready"))


  (use-package projectile
    ;; :diminish projectile-mode
    :config
    (projectile-register-project-type 'django '("manage.py")
				      :project-file "manage.py"
				      :compile "python manage.py runserver"
				      :test "npm test"
				      :run "python manage.py runserver"
				      :test-suffix ".py")
    (projectile-mode t)
    :custom ((projectile-completion-system 'default))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :bind ((:map projectile-command-map
		 ("p" . consult-projectile-switch-project)
		 ("f" . consult-projectile-find-file)
		 ("e" . consult-projectile-recentf)
		 ("d" . consult-projectile-find-dir)))
    :init
    (when (file-directory-p "~/Projects")
      (setq projectile-project-search-path '("~/Projects")))
    (setq projectile-switch-project-action
	  '(lambda ()
	     (consult-grep))))

  (use-package consult-projectile
    :after (consult projectile))
#+end_src

** Rsync
#+begin_src emacs-lisp
    ;;;###autoload
  (defun ora-dired-rsync (dest)
    (interactive
     (list
      (expand-file-name
       (read-file-name
	"Rsync to:"
	(dired-dwim-target-directory)))))
    ;; store all selected files into "files" list
    (let ((files (dired-get-marked-files
		  nil current-prefix-arg))
	  ;; the rsync command
	  (tmtxt/rsync-command
	   "rsync -arvz --progress "))
      ;; add all selected file names as arguments
      ;; to the rsync command
      (dolist (file files)
	(setq tmtxt/rsync-command
	      (concat tmtxt/rsync-command
		      (shell-quote-argument file)
		      " ")))
      ;; append the destination
      (setq tmtxt/rsync-command
	    (concat tmtxt/rsync-command
		    (shell-quote-argument dest)))
      ;; run the async shell command
      (async-shell-command tmtxt/rsync-command "*rsync*")
      ;; finally, switch to that window
      (other-window 1)))
#+end_src


** All Icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :disabled
    :hook (after-init . all-the-icons-completion-mode)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)

    :config
    (use-package all-the-icons-completion :after all-the-icons)
    (use-package treemacs-all-the-icons
      :config
      (treemacs-load-theme "all-the-icons")))
#+end_src

** Org Transclusion
#+begin_src emacs-lisp
  (use-package org-transclusion
    :disabled
    :after org
    :config
    (message "org-transclusion ready ✔"))
#+end_src


** Org remark
#+begin_src emacs-lisp
  (use-package org-remark
    :disabled
    :after org
    :config
    (org-remark-create "memorize"
		       '(:foreground "white" :underline "black")
		       '(CATEGORY "exam"))
    (org-remark-create "magnet"
		       '(modus-themes-nuanced-magenta))
    (message "org-remark ready ✔"))
#+end_src
** Org Alert
#+begin_src emacs-lisp
  (use-package org-alert
    :ensure-system-package terminal-notifier
    :custom (alert-default-style 'notifications)
    ;; :custom (alert-default-style 'fringe)
    :after (org alert)
    :config
    (setq org-alert-interval 300
	  org-alert-notification-title "Org Alert Reminder")
    (org-alert-enable)
    (message "org-alert ready ✔"))
#+end_src

** Company
#+begin_src emacs-lisp 
  (use-package company
    ;; (define-key company-active-map [return] nil)
    ;; (define-key company-active-map [tab] 'company-complete-common)
    ;; (define-key company-active-map (kbd "TAB") 'company-complete-common)
    ;; (define-key company-active-map (kbd "M-TAB") 'company-complete-selection)
    :bind (:map company-active-map
		("<escape>" . company-abort)
		("<tab>" . company-complete-selection))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    :config
    (setq company-selection-wrap-around t
	  company-tooltip-align-annotations t
	  company-idle-delay 0
	  company-minimum-prefix-length 2
	  company-tooltip-limit 10))

  (use-package company-box
    :after company
    :hook (company-mode . company-box-mode))

  
  (use-package consult-company
    :after consult company)
#+end_src
** Company Back-ends
#+begin_src emacs-lisp 
  (use-package company-web
    :after (company web-mode)
    :config
    (add-to-list 'company-backends 'company-web-html)
    (add-to-list 'company-backends 'company-web-jade)
    (add-to-list 'company-backends 'company-web-slim))

  (use-package company-restclient
    :after ( company restclient )
    :config 
    (add-to-list 'company-backends 'company-restclient))

  ;; (use-package company-tabnine
  ;;   :config
  ;;   (add-to-list 'company-backends #'company-tabnine)
  ;;   (setq company-idle-delay 0))
#+end_src


** Evil Org 
#+begin_src emacs-lisp
  ;; (use-package evil-org
  ;;   :after (evil org)
  ;;   :config
  ;;   (setq evil-want-C-i-jump nil)
  ;;   (message "evil org ready ✔"))
#+End_src

** ACE
#+begin_src emacs-lisp
  (use-package ace-link
    :commands (ace-link)
    :config
    (message "ace-link loaded! ✔"))

  (use-package link-hint
    :commands (link-hint-open-link link-hint-copy-link)

    :config
     (message "link-hint ready ✔"))
#+end_src
